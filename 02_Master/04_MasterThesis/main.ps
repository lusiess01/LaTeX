%!PS-Adobe-2.0
%%Creator: dvips(k) 2023.1 (MiKTeX24.4)  Copyright 2023 Radical Eye Software
%%Title: main.dvi
%%CreationDate: Thu Jun  5 17:56:42 2025
%%Pages: 20
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: NimbusSanL-Bold NimbusSanL-Regu NimbusSanL-ReguItal
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips main.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2025.06.05:1956
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 615 2022-09-22 08:39:26Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.41, 2021/11/16
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
revision 952 gt 
{
    systemdict /.setopacityalpha known not 
      { 
         (\n\n%%%% WARNING: Transparency operations ignored - need to use -dALLOWPSTRANSPARENCY\n\n) print flush
         /.setopacityalpha { pop } bind def 
         /.setshapealpha { pop } bind def 
         /.setfillconstantalpha { pop } bind def 
         /.setstrokeconstantalpha { pop } bind def 
      }
      {
        /.setopacityalpha /.setfillconstantalpha load def 
%        /.setblendmode { pop } def   %% works again    hv 20210825
        /.setshapealpha {dup .setfillconstantalpha .setstrokeconstantalpha true .setalphaisshape } def  
      } ifelse
}
{
  systemdict /.setopacityalpha known not 
  { 
    (\n\n%%%% WARNING: Transparency operations ignored - need to use -dNOSAFER\n\n) print flush
    /.setopacityalpha { pop } bind def 
    /.setshapealpha { pop } bind def 
  } if
} ifelse
%
%%<bool> .setalphaisshape -
%%    If true, the values set by setstrokeconstantalpha and setfillconstantalpha are interpreted as shape values. The initial value of the AIS flag is false. 
%
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/fill@Dict 30 dict def				% the fill dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
%
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  10 dict begin
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
  end
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  40 dict begin
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
    { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
  end % userdict
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  50 dict begin
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
  end % userdict
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  20 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave 
%  gsave w neg h lineto CLW 0.5 add setlinewidth  % test für border beim Pfeil
%  1 setgray 0 setlinejoin closepath stroke 
%  grestore  
  fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/ArrowT { % like tikz
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
  w 2 mul /w exch def
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
%  w neg Inset neg rlineto % move to x=0 and inset
%  CLW SLW
%  1 0 0 setrgbcolor
  2 setlinejoin
  stroke
  0 0 moveto
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
%  5 dict begin
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
%  end
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { %  on  stack \psk@dimen
  CLW mul /a ED % save radius
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid {
  40 dict begin 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
  end
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /RotAngle ED 
  RotAngle Rot /RAngle [ RAngle dup RotAngle add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 249 2021-09-14 10:22:55Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
  4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
  end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  1 dict begin
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
  end
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 601 2022-09-08 19:21:27Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2021/10/01
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
12 dict dup begin
/FontType 1 def
/FontName /PSTricksDotFont def
/FontInfo 9 dict dup begin
/version (001.000) def
/Notice (Timothy Van Zandt <tvz@Princeton.EDU>

This program can be redistributed and/or modified under the terms
of the LaTeX Project Public License Distributed from CTAN archives
in directory macros/latex/base/lppl.txt.

Modified by Etienne Riga  - Dec. 16, 1999
Modified by Etienne Riga  - 2005/01/01 (er) to add /Diamond, /SolidDiamond and /BoldDiamond
Modified by Herbert Voss (hv) - 2008/04/17 
Converted to OpenType by Marcel Krueger 2021
) def
/FullName (PSTricks Dots) def
/FamilyName (PSTricksDotFont) def
/Weight (Regular) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put } for
dup 65 /BoldAdd put
dup 67 /BoldCircle put	% 67
dup 68 /BoldDiamond put
dup 69 /SolidOtimes put
dup 70 /BoldOctogon put
dup 71 /SolidHexagon put
dup 72 /BoldHexagon put
dup 73 /BoldBar put
dup 74 /SolidAsterisk put
dup 75 /BoldAsterisk put
dup 77 /BOplus put
dup 78 /BOtimes put
dup 80 /BoldPentagon put
dup 83 /BoldSquare put
dup 84 /BoldTriangle put
dup 88 /BoldMul put
dup 97 /Add put
dup 98 /Bullet put
dup 99 /Circle put
dup 100 /Diamond put
dup 101 /SolidOplus put
dup 102 /Octogon put
dup 103 /SolidOctogon put
dup 104 /Hexagon put
dup 105 /Bar put
dup 107 /Asterisk put
dup 108 /SolidDiamond put
dup 109 /Oplus put
dup 110 /Otimes put
dup 112 /Pentagon put
dup 113 /SolidPentagon put
dup 114 /SolidSquare put
dup 115 /Square put
dup 116 /Triangle put
dup 117 /SolidTriangle put
dup 120 /Mul put
readonly def
/FontBBox {-572 -743 572 743} def
end
currentfile eexec BAB431EA06BB0A1031E1AA11919E714AC69FC5B91315E2
3949B468EA8965C09E14B93FD8F0A9A9B4A0240775693C371C9F5E8CFB4752C5
B8C3907EB8B475C65DEE88EC0510BC599D0660C41C842A3CCA793376ECDB36BF
799EB8631B5A08846013BAF4256252AF16B24E3BEE4C45F8AE9AEC40351B49C3
CC0B1DFA717674CDC7A3BEA5CE689121348DBBD82720A92C2D68DB27F03F105D
87587E74605E01EDE24B0539FAACD5311070E7BE0BDC57182DA408ED060B7B6B
964AE3EED6C8F348F298B28987B635D1332B77CC33F0B6BF682193B93CE93416
64F638070894F299603700A95B876A3FE5CEFD5BD19928E5DB60E0FB25969A26
05A6651F04B60470D0CE8E37C50EF9350CE0A4EA9F5251F0E9A1B7ACEAE4DFF7
40578E61DA30D0C9067954E23DA81539D0601CCB3FB78040200CE8A1B1E2B4BE
E6BA8FC9121F04EB916D5F9D98C77AE10A51F451B440230C23077251E29FC6E4
2844FC17F11EE282266DEC3A15C96832E595773ADA1A48330AEE455DC4A2805A
C7C7CA085D16113F30AF3EFCFFE079C45CB512DBF81EBD6137314545CA6CE891
19B42A3518E28989CA7DB1DB6F28ED3CB0E9F227A023660A46D14CF05E197E23
3015D9046635F59924C00F5EBC3561132B94C23E91D3AA1EB997B9F486C8793C
E2B8B9224C2C13AEE4AF9AA6E2FF96FFE84223ED1A902C38AD739E0C863A3A37
0482E2F28EB620257113D8EFBE63FCCD181158CC92CFA474170798746B73808F
8D4CB2A16B5BED0ACE4673AACD1484A8CF1F437F58D478A2CFBDA394851AE87F
E8E488302B346131EE903FFF22B882624BD2EF1381761C1FE4BAD1E701CA9C4F
F34AC1E9F9EC27E673FA78703FFB2432FDCD62AE52DE02D55580636F347297C4
A74D04EB5FF11D31D3D04EB580E6C54F88A817049249B0749FAEBF78C4A3CE4A
3F375E7C57D35D8CCA7810BFC7C0F4D4F14F8A29EF000D2BA97AAB26D48D50D7
CFA8E3586105575D14DD80F3D2022373F802C98A78E465F7688C9952848876D4
D7BECAD0FAFBA4674944BEAFA75ED8A87873439FDA03B482FF60B84007FCA6C0
1A04B7C8BF346E30BB6D838EA08FAFF3A3D331527459C665264B9E07A7262419
E0AF9F0AB9897891BF0CB656FE222587FC8890C3FF9D848ED557732CBD2865E0
F4838A6C6E5D794F7781359855ABBD8B2BA63EF2190D930D20C74E9088BBB9BA
62865A174D03BF90A0959079C28DA220598AD0A960C66697A49513D3F152C306
0A9E3133F750EFCDD43E34492A65321EE3B08F904968BB642D3E46DFAF2697CF
52589695642631DEAC79C3B4DD9DE61885901D9465B538643F60FC1B46D83DC4
2D6AB7AEF088D43531C4CB5957A74FCEA04E4BB05B5AF68BCF316C62F7A26CB7
88C6CCFC7859DB9915626FEE3C95F6FA3777B3F6ACE5271BF3309B0A41AF9853
5866F4EBABF5CBFA2D3F411BFB2C3B66962102B183B281FABFF17CBE2A744CE6
A8CB6E1B3D624A68104A7E43F20483622B9C93D8803D71C5ABD930DA44DD6177
F6F411619A130954C54D3BDC24E66A4EE2B3F6C7EA40167FF6E21CA13DF3E903
3E88F8F46C5CDB75E816EA0235669625A772779079CABC8DA76AFBBBC1C15EF3
5695EB0FD46E34C3FE121CC29F7FDA3384B0F1292087CBCB9CBD7B2377AC0F76
5BE0CD3485F2FCD3C6C0012125C273B48900E5200008B21F6DB9F4D4E8027E7B
34265E1FFBC9666A2678CEBA46AE908BDADA630B135683D4F66934702F939912
EDFF3EE524B38F25A0E12239EA471DC4A90814D38747EEF125FA30BBA9998119
A1499E6E6BC26ED39814B64D04D500C2E14A062125A7E4AE9985BEDB6C4A800B
D37D8F13274B28F86D73600A165214E1A8F0F787C92B3ACFC274A34EE064732B
BAB298F0DD452B3DA4E230624FA5296C7ED8A464C5E7D31E0A9C88FD767D4C6F
E2348CE16CAAE803DBA21AF5B8A44ED8B92ADB9C07D422878C63EA6163DFFA5B
FD8AD97240D760FB6667DF08A0F16FB66B2934E64A39C0D82535FC1ABC3C28F6
DD83851928AE495312AFE7F0B7C3D0990D7725B54B0D8644C01CF2BD29340E92
FDCC5D221298669CBD1F842A1BF45D59D4BCC425E3D7FECB69AEF5FF54E86B80
A6011AA0ACD1D286F7BD2CC6F995355E214BEA9DA0696F3D436BAB29C2328173
4661158DBB87A777A8C0FECA5B1DEC07197BADE6B65EBC7152E119BD58204353
4C4793FA4566107EFFF912A0E03255C11824CD079923F7296DB156A8C9134BF4
E573795C7C720A3CDBFF693602A141D436B2F7495B01F6FBA43ED1CB444AEAD2
400638034AA4D95EF5849E61EF2068A4848A27FA16EC8931456000E61E1181BF
545AD271F9D10C60C6AE8616B12998B08270B9E29464DE2725F61EC431C7023D
FB012FFB2DB2EAA1C61C06519BCD8114331FF644B79E9E96E21720B38098D513
59BF4CA62716A9289C555C1B5C05D68F762B5B2E0B9BE7F67D9EFB20B8A0A898
4DE73C07853DAD10A8805E5844A36027E2AECF4F10CA66BFAFEC17DD1CC93373
547071168AF5018B0B6A40E606207ECFE146DE6F8881F969E06207A973DF290D
29E325B6D59F363A5F4105AFDDF24CD4FABAE1B5E784638F3EB2E67C88879F69
00101C3F6DF95D7F81E6E3FE732DCC175F1FEE41D87120F52AB5EA54FD2E1666
CFA5D665F9B97531D74B56CEB8A9E1417A58C1790ABEB68F2F1B49EEB34D24B2
855294A892EC5C92D090BB460AD8844E85E25094B7CE117F343A856F27CEEB36
1CC7AC29D4048E6ACC5947AE7FB937807AC29E65353D20A57E461AC33EEBC75C
24068278B586B33A5E534B1A9ABAAFF492250074EA4CF3EF0818D8F0BA0C7428
40BF46DFCC9711A0420413D0667C7361C8ED428BC510616C34AB28BCC9ABA6F2
43F08A2FCCFC5D1BAA77AE90BF0E296E2C3A99268D7906AE12CDCEA5CE8B5FC9
5A75526CC0B72C7E122C2ED67153BC9AE380DF04FE51E7B0C5AE4363D95DC730
AD0EF34542C179668A9D5807AA22256ADED921E8711E673C67CB5086D7563C98
2A6C681813E07A8E7440FE562EEF08661E1D9CB5761595B515DEC347F0DC84AA
1B3C272792F2D9B4B11C5EA50F7584C7D931BF5BA1A39F635C87CEC31BD22D64
10F7855D66EC86193FFA19ADD7880BCE5588D2322071D443F47D6B4F3F66CE68
4B87D99A5A0D375535D153353DA6E154FF78F458A671CBE1E7136C16435BF244
6E60705C79C82EB5D40934AD496FB08999EFC6E52E56C0106E39603F25D3B946
A7850B4A4EF56B1E5CA32021F191236EA0FB315DC37D708115765F85B668D051
D49167E374DFA9078D128E745F1583EF885F6614D0D1CE1F3F27571B5C68451F
38BDD4758A54A3C6F8ADB3DC20CE95DA5B22C77227CD8EA53C51A643250FA288
4DA7B6F3D93EA1C82B6639B6090352F6E4ACD6A478701D88F8591F71ECB15CEC
FE6FA0C4C049FE9F04612DEB944271F1EA167B2103D69C11E5B6C66CB8C859FE
8DBF7D2E4B26FDE68CFE085B61212906AB7B4E4DC2FB44E8B035DC6938B09632
5C2AFE3B1742756E1DDE8E2D16D957B07713C650928ABFD08BB5BA216086D699
797884E3D06F0096BDE68F929F9FCC4E5819320BF62AA75686A8EF7A11B33281
2477A82B9B0D3B71E8AD3CD41388A69C33B7A4482BF2345419DA669BB7544636
CEF7C14F8C55620724B05B7EDA33584D9CA46B697EFE6CF01B6152DAF28F42CD
DFABA3788B04D5A3AF493625E3387AFCAFE7EFDC62F4A31CA69E7563ECC5F919
91763C850EE7F7B6A979DB2955BA8E4BCA4039D2F083DB3B256F68BB34624CDE
2A745010D76C85300691A0DABBE33109721FAFF7C9BF7D9B2E0F1F9CF5C76676
02A9C95488976ED8956EC9C1B9A9F3CE3B0F7E2DF387DF831C855D9E21908376
BCEFB52FFBA0AD0F9B56CE4043643BC582750110B16399281C79183A8D693AD8
A961C6DE94A882D27A0D9806A5D0ACFC29180CC21E375BA98DAA4C6043EC4532
937C4870CB65365D2CF81C66A72841E189EE4BC12F8882AF0652D0EE3DA63D1F
010248A498F3809036D1FBB712F2D78CE71E0C9AA2BB3A55094E4FAAB574A474
5B153A3D4AD4ED347819033CD288FAD39E440D2FA03630F9529E50BF1E6A51CB
309A34CCCEAEE87C8B3DFDFB81A9B3F0D36DCA6AC69588F51F29BB83015E3244
5C666CC22DC85F7A86FD1D0311A8D8D1F399F87B2859E66C9432E8C14E04585C
A01642BEEAAA975AE4D7977D40FBC85D4B8F40646721A9F38E916C226EB2C045
04EEB6027C835EC0F0F8091EA0250404BE75563D44B40A5D67C1A122E9E9DF7A
5692F8902FDAEED37EB2C430AD36E021CF56CA560B77137710090D8685624CAD
9E6BFDF5BB2FF6147A65F164ED0490E1126D67FE1A93D5E77275FA925CE8666B
E8FF666F97E3101881467A955FDC9864C9B85E943918D4C22F84391D35DBBD14
2EE39F130DB83BA304C931113287A3F7CA042128135D9AF672319B1C3C1FBD59
80BE72F051D6A6FC34174C461A77F000F446E594CE046052A571505F0E4922EF
04A8185830D6D47E006F893973CE8740FC82F77CCD5B2CEF7DBAA9D2A0EFBFA3
2B0A73412A362977B01FCDC95FC8E0B920D884FF7E40FE9AFDB683776B95487B
F096B4BBBA2BED724ECE2CD766C8D83E28FD65924942AA4A3064AC3D5A322D86
3A4D41DBC2F5C6E21C2184CEECE1101A10F8290CBF0D4116EA1C1DB8988785FF
E50B066A4C21E99AA660872A5EEAC307C7794B303EE066C57594AE2389DBEA5E
85CDD9D314CF686811C2022E8E0EBBA0B699EB0405FD2426EA4D698CB4757B6C
53E65BB5D42C65C7A9DA515DA23CB3834C89F769154447BE2D92229016235658
4F40E982A14EB4E6BACC81313C8E0A74A19FD184B1364CA275FC6A62A8709428
BA35305F02331212B45B9268D582A8B638B430BD0A51C607D4C4FD862F0E591C
1A1273650BBE5DA16CE10C98F5209A7C998877BE8F57DEB4D9AA46CC2EF71588
0EDBD79F25594D516AD74C54762FD393D4810EBC8AAF10F821DCFE8D503B37D5
6AF14F0FA57DA3A3365EF38470C1F0BCD693378BA20DF34D263165841DF96F90
32FCB81A44BAF77D3C294697CC8CC971B555F94E768A275A154D63E71A1D6C67
CFDC729E86FB9315B9234D2AB1D6529BFD0D4C852C5438D368B350D8420DCD34
4A164EAC0AE99AC9A2D07A1F77D2E68255EC3F7448F10DABF969653D21590661
2B1DE5DF11BEFA41CECFB00C9A6A7AE3808009E41E2B933C6AA50E1E9BC8AE00
651C8AEFC9FCE6E647FB5D6032000CF87663510D97C12386227E58DD71FD4228
A070BE013F86155C46C8F96D3CF1DE07D60DA3D0E05C3B4A6B5FBAD168B06A50
30738754199245C8AF782F76C58A8F638A2D85CC51309C866729297E3CFC075D
6F9ABB484C5D1D307E06D6ADEFC769E5F51E389520288843F373B71B233E8B96
E59A7053D1D7E17972EDFCBD700A001EBE7759818EECC03353EB0B990EE6DA34
8C65B5092EF565AE325B00DFA892FF2E7217990F6020AEB57974D38E31F97183
FFB436B7DD8C18A80EB7D43D1EFB9A8D3EA99E77F65AD1443AB10857C44B7AB8
2EB0BE22CE0CDDE525B9DE03251E192A3B436C3907AC59EA40BBB63A5A7DC56B
DF08035260ADE398AD7ED78F895AE0CE0ADC74F4BCF4FD9ABEEBE132A537D788
B884084A69BEAD6791D7458A0BC58635A1576F368FA8D2D99DCB6C31BE97F432
5FF313DDA4B7411296716D32049D31F8E85C7D4B4DAE656AEFF8B7B8C1053A57
F13B93F29800E250C98BA58B6061AE740762F9202122F156852A326C13F3675A
4FE680CB4FD1B94C875840A97F2D14D6C1EFD4D4C37F39752572225377072C53
6854A002922441AF733B6F90EFF39E37E1605AC5A3F4B45F66DFC2357B57CF40
263D66A21EE0F0C1D1A0E4BA12454F9A252CAF55B46F5A907DF9D94650DA1D5C
4CBE7E65DE6BC996F52CEC6A02D4D987D99F7B66A1C786E9463A5628A50F5163
02A7F1CDDA1FB3337774AD640B02D504018E7C11267BEB7F51B8AC2FB3326EB5
1EF125B3AA855B3AF7891595077B9FD5960896A022BC3CB4F97F4CC175F09B81
128452C576CB26479E769DE0B75150360EF0C2AD3530A8A3B0C61005BD13EBB8
4F6A707A8D1565529BC1ABE78FBFBEBAB170ECD6908CCD31FA33368E485DCBF5
24DAC34619A38FBDA43C886FC6B4D58C7349C6D577D3AB8DF830F3DC3E06BE4F
8D1283533AE54551513735E278DC928869953AE85693870179055B8D953A8062
0339D4FC9D3DCE68C408FBDE261FAC68438ACFFC7E0F12168B91ECF56ADEEF93
FF6A2D2AE5D35CB0B49BCDED51EF5B16B6A7364D38592BE0EC092C66309F6D0E
E9E73D7AC69A9F9F8C83B5D7352E92D27751D149F552DF5ED5825A79507C5C8A
725E19E744631C96C74EC15829092BE11AB890C9AFBFF608B4F3B5FB42B29F1B
DA5436480A26657A2EBA297FD9933FC6B0071E62551C1A6398F82B097726E06F
4EAC8ECD5C4B316AF63B64A131F3EDFC50F1141E56EE81CB44A03B0CE8B6CC4C
B9E6DF9F47E957E47D4C5C51508C0825537EADCE33E9C3432AA0C0E7890FCFAA
54E1D95E922165EAECC89E7E18A7E36A269D68D918B4E64246066C88F009D478
D17DEAD4CE93F288531DA3CDD4F0B040CC82544B95E6EA26F002357CCF6E3D7D
F52FF5C84DB56CAE8F64D9DE498A54C28558E34F2EBCB8CD3F3F2AB2531D3D74
6A1DC97F93E312DC04158ABA06E9E55BE5A8DE5E0F3D8087188C8055B4C6B7F1
AC373AB1563F756E269BF3D90BDFB9EF3E62E610906E1928A4FF14665EC4DF2F
1703DEDC813E3BD7EFC9CDAD47E0DAF19D2C0701F2C027AE2986BE7715E0B0F4
15D4501FC252AB0608A9BF79FC085AE7F9340C073817296A900E1AB7033D4FD5
21AB67D4AD5E29DC4F20283A7864A4D6CA60908CE2D544E7C3C894A5635FDB42
989443A0DB0AC9281BA74DD27B1B573911DF90AE01984A865A3DB95125594779
C77DFFEB5699712598DD86F94CD032D14E0B71A92890D3EDE1443A3E30968AC6
33A004ACE18A56520853F64A4244C7B479530A8C5D18E47B38D67BB508A58710
6B5753081BF59EDC0793542987F1BC26553DC19CFC6EF456DA872DEAA95884C5
D4D8E503E6BFCF252AA8E144F2A24F21A08CBD05C4F65C9A9636B102ED4ED535
2A3C0A4FF4A039C3ED2C9E00C3E680C4A8FCFFBD90E871E5075FEB7661340E96
44DDBD719F2D4DD690457568802749D1E6A1EB15F64A85414B1680BCE311E8AC
1C08758B6453DD440D8A9816EDEA14E09224144E91276B842280E04A0BBA4E68
CEC5A9603A7F56551C2B11DADF1F4810C734BDEAE930B5DE4556DA67981B820B
CD2BC5A0FB8D8790D2666E0AE5558B1D2200534E83F7851F3D9482A2E8908F92
3BA87358A66968605B3D53DA4AB1D93389BB689B0822526D9F240952001DD054
09B9BE40559FA3FA4F216F022D50C408ACB34021AAE5F2B257DEF13A25F02701
234CA72E44287FA9D88D7EF4F768C35A65CDA6B411323A501BF3848AFE448DAC
2240C6CDB5208EB259D89A8F1BE43B39F911F55D88B5822E443C898E7ABC7EF5
B3953C2EC6DDAF174DCED0BF9353A2713774A8DF9A9091AA553D30361C9EA580
56F4993B29EDF2D3F3F1D6DBDB31728A84CB10019CE7407FE4201FC9A9D70F9E
8FF56B5CE83D2810A507AE941431A5D9B513A6F55FDD452D6309492C76D9C5C6
DD9D8F6CCD27BD71AFFF7FCE5D34DC355A066BCC3C9282EC971521260CF0E12E
936517B05ED0108AC13A671654A2EFD5FB71109B16B3B4274BCE4EBD624F288D
9E90D28D18D27FE4628444E76D3EEA619AE9476D181B4AC774AA62BC6D8AE5F0
84F90982D5EE1D24AFB37703671B2493AFFA4C51245086BE865627AE7D0E7759
179D509827104F840BD2C720F35D46D9C8338C0F8C03ECAC14E9BF044A04A96E
177D1C5CE74D34AFF22F3937F05A1B54F46CE9C5F2D60907DB971F5B2F8E5B9D
3ABA4ABA144209E6845B85A64F3A97CDC9B6AA5BD9E68F726F511255CDD9394C
0A0332C27139192F0C5D79668CA0CC0CBBB14E4CDD707F11F048CD6E0756D90A
F2EFCD882A296CF97148364A31FE8D7B5250C8BBC7E9F39EFC55B4662EC31535
416F2F90DDAC955FBB297FD4829BB73079FA91012386544B98E65BABA975C754
36B64848E3903D03C59BE0DB94E12E600E82A72EDCDEB4AB2260EE95F46568EB
D0A7002D21C9BAE538CF8A347A2751868343EE4FB3730984335FB2B5B88DFEE9
66A8062C26E4B834F568CA6164D6FE9AEB126502B943DD390A50B93D1CDABCD3
C96FACE03115D56C6BE19F06CF7DDC375238E238B448D27D64FA49ADCC0A5B24
AEF014B5D48F6CC493AD69E74DF47FEA376C6EF4B14C2FB71ED0F42E09F1651C
EAEE97341F26A6591B83FE723C448AA04AE504D6C34BCAECD27DE4B247678C7E
C51DBF53850EE7E615C7A01BC705F714B7B0C80B7AB79C42C24C036C6718E5A3
6E1475F07D9F7035866A73B4D0A67807A03FB61352F73A349AFFE3CCF566F457
6A62FA32004F3FE6A15E7B25C6E9AB2D1DBC9964E6903AEB408F09A0427933F3
4E92753419A9FE79513A2E39FAA295A92292D521E3A95FBBB77AD659D4E03D2B
39EE02738A10059514A8B51A35D3302C25891B90F74EBDB362E1017C676F0A0A
9CB67C9794A27FC7F0ACD189AE59C8A75A5E9BED84A5FB6EE5DC1F74A620E559
51D8C5CDDC4B37CAE2AF70C48B6C306BE826EBE8D22DF714D1F2FCA10369A266
F5DA86D65F730262B0035E5FF68817C93CE0FBBC201B593D955E40C99E235D45
7F70F497A8A11748AAA70FEA09AD8F5BD1A01E06D56BB6059DBEF8AC8AC5FB0C
59B5CA3C447022EA6AE6F928DA7C9A6A1F322C5D53CE905829C41408CF7449C2
69FF41A9B83869D7F230C78871C22933C991EAE40EBC97D8DB082B20E4895E49
6D6EE9D22FD9B395CA79073C08C0053E3C26124538544D9C68717076746A8D72
7DC34AE353D29983338A2D1998A0D62BFC296E433A8E48CA90B999B298609587
1164C2A65BC00D0F124A8EACCCCDA7A7F65D5AA4DBF70A273B6CB918B00F6ECC
0131BA9461BFC53357E09E0A3C615E79A26261D83F71B944DAAAE74A4B7484AB
D22B4BB40D4E9038E721EFB5F672796A3C961C298B29ED896A27E389D134C21E
7BED9DBB0FBB3AE2ED4A661992BCC8E4976F842785431AAD804360FBE8A134E4
3CA9D26F8571E18D0F27F70ECAF659A99FB7955E0F4D8690447CA37F42A05D15
E1D6559A1C95CA424A643DD58D0416A374091D94CD7A48859EEB4A461A6A436F
D07DD5A94E7D5B033D2AD99FDA4E7373A1D6CFD11DE94DF6537F25F5CFA1428F
9A126E21D819AE1A044510186FC8A9D51C20D922F3279A85E31C1F34B6B240C3
000775B140120C6E697D7BC14AE22F87EC6885C3CA40E718BAD7688C8A0B3E9F
49652FE7D0DE406B2EB70F039AA8B10C7601C4929B2971A9A3CF98F52F9FE122
CCD2D944BE6F68EF6F4F8EBEF51AEB1DFAC87C164F94B36511BF120D126D6824
01736A019ABF0BA4355854251D381828F2D5C8460F3B066EEA447009C01DB22E
33764CBBFDC5C74CB881098E7586725777144FC38DCBAB71413A26068EE3EC6E
53300BA5BEDBE53E5FD61E6D2E390C7E1D82454093264E8A2013AA0C91058031
B52A08D996CF2C82993DE9497AF91D4AF8C99E68577589F98564AB36FA448901
E671920A8DEC9535AFA9038AA1D528C4B31ECC27A505A5B83E4ACA119C6D3BF7
1AD9B21318030B2F1F69F132E3DBC5264A4AD516AD4736CED6E8CA4C3352C78B
2B836CA994A67BD63576593FAE07433051723DE3A67FEAEDA3CF10F66F7DB936
D96BD0A813A5C40B144EE897A5CC701B0297E190B6999EE9808A54F86AE2C05B
0FC4056944066CDBADCE78A0524D6F190B155120749CA84957FEBF447B748BC6
27B3AEE460D4D5FCF042B7CCF4A4DC92110AC09B16669CBFA4CDA713606FC086
97E8EF90EF2BFC8BF6C811FBEA5163C68B95C0B65EA87B9D12942EA0DE78FCCE
9DD86341497DF3F0CD388BB386658FB6D774A46E9857E0091F3B2C6E016BC24D
037FADA56418D223E672609C891E32E96BAEB77C7C568F26FE03B720F5F2D875
9F1C5BF185C4B1DB2E6BBA48F4BD5F6457D92B701E7DCDF0ABE154A9CDE3BC17
8F1F1CF521081036019C20E3A8AA6958D08C3EA3275CCE2F96F0FDACCB50ACB9
37204C55EC41CEDA3AF577FB778E606C7C2EE814E8D3E1C250DE4D3E587AFDFF
A1266218FC1D9A386D00BE86EB2433531F5A978031775862254994315B01C937
CCAF1C5DD69F96F5D64DD288087639B02BDD29F9B96C5B4F525DDABE245371DD
4717AC198F6477E1A2E6CA5CC2AC20FC94314212F5146721FF639C6CEB6936DA
A7ABE5348153D0DBEC6F96F61B6B7E53DD82107EB85F5D2FD094D82F4F446CEE
B64340FCE74AD83B2082952ECA69C53ED64B6F03FE3F54695FEEB8EE1D61C6DF
87F7214F97C165F4962E5B78500E7F4E684AD4F4F575F06FB275D449BAB97B06
BBC205D8FFE660C682A8CED9E1F7907214AB2E6BC7C830885EA32605B069ACE8
66EBFA95DA16774EDDCA73685D1B145770BABEBCFB3989284B27B7E698E12064
147A2EF3F2883F85C9C0E927DAFFBC9450E1B6E918726DD37B5CDA55E6D0D8A5
C3B5ED376F4772DF45D45C4CF18BEB4811CF1B9B3D920BA4A98A80F8DABC91BA
362EA6A74FA33DDF518B09564FED9F04D4312CD988EBA55DFD3145438A223943
488699B3D16846B51F2BB650790EB63BB9ABB2B3EE27C62B1B01FBA662B70542
DBB61743DC569337082176ECBAD417354A5F900EA0BB5479162ED7ECCCD71AE8
3B3EE296F3D14D289B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%/PSTricksDotFont exch definefont
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 438 2022-01-31 17:45:26Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add Power mul ENeperian z 5.5 add neg Power mul % Power is controlled exp
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 216 2021-09-10 12:28:13Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def

/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 2019-2024 The LaTeX Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
/color.sc { } def
TeXDict begin
/TeXcolorseparation { setcolor } def
end
true setglobal
/pdf.globaldict 4 dict def
false setglobal
/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
      pdf.dest.y pdf.tmpd mul add
      pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
            pdf.count 0 eq { exit } if
            counttomark 2 roll
            1 index /Rect eq
              {
                dup 4 array copy
                dup dup
                  1 get
                  pdf.outerbox pdf.rect.ht
                  pdf.linkmargin 2 mul add sub
                  3 exch put
                dup
                  pdf.outerbox 2 get
                  pdf.linkmargin add
                  2 exch put
                dup dup
                  3 get
                  pdf.outerbox pdf.rect.ht
                  pdf.linkmargin 2 mul add add
                  1 exch put
                /pdf.currentrect exch def
                pdf.breaklink.write
                  {
                    pdf.currentrect
                    dup
                      pdf.outerbox 0 get
                      pdf.linkmargin sub
                      0 exch put
                    dup
                      pdf.outerbox 2 get
                      pdf.linkmargin add
                      2 exch put
                    dup dup
                      1 get
                      pdf.baselineskip add
                      1 exch put
                    dup dup
                      3 get
                      pdf.baselineskip add
                      3 exch put
                    /pdf.currentrect exch def
                    pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                  exch
                repeat
                pdf.currentrect
                dup
                  pdf.outerbox 0 get
                  pdf.linkmargin sub
                  0 exch put
                dup dup
                  1 get
                  pdf.baselineskip add
                  1 exch put
                dup dup
                  3 get
                  pdf.baselineskip add
                  3 exch put
                dup 2 index 2 get  2 exch put
                /pdf.currentrect exch def
                pdf.breaklink.write
                SDict /pdf.pdfmark.good false put
                exit
              }
              { pdf.count 2 sub /pdf.count exch def }
            ifelse
          }
        loop
      }
    if
    /ANN
  }
    def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setblendmode where {pop} {/.setblendmode{pop}def} ifelse /.setfillconstantalpha
where {pop /.setopacityalpha {.setfillconstantalpha} def} {/.setopacityalpha
where {pop} {/.setopacityalpha {pop} def} ifelse} ifelse /.pgfsetfillopacityalpha{/pgffoa
exch def /.setfillconstantalpha where {pop pgffoa .setfillconstantalpha}
{/pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath
fill grestore newpath}bind def /pgfeofill{gsave pgffoa .setopacityalpha
eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}
ifelse} bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def /.setstrokeconstantalpha
where {pop pgfsoa .setstrokeconstantalpha} {/pgfstr{gsave pgfsoa .setopacityalpha
stroke grestore newpath}bind def} ifelse}bind def /pgffoa 1 def /pgfsoa
1 def /.pushpdf14devicefilter where {pop [userdict /bop-hook known
{userdict /bop-hook get aload pop} if {0 .pushpdf14devicefilter} aload
pop] cvx userdict exch /bop-hook exch put [userdict /eop-hook known
{userdict /eop-hook get aload pop} if {.poppdf14devicefilter} aload
pop] cvx userdict exch /eop-hook exch put} if systemdict /pdfmark known
not {userdict /pdfmark systemdict /cleartomark get put} if end

  /pgfwritesamplecmyk { 4 index 0 5 index pgfcheckcolorrange 255 mul
round cvi put 4 index 1 4 index pgfcheckcolorrange 255 mul round cvi
put 4 index 2 3 index pgfcheckcolorrange 255 mul round cvi put 4 index
3 2 index pgfcheckcolorrange 255 mul round cvi put pop pop pop pop
} bind def /pgfwritesamplergb { 3 index 0 4 index pgfcheckcolorrange
255 mul round cvi put 3 index 1 3 index pgfcheckcolorrange 255 mul
round cvi put 3 index 2 2 index pgfcheckcolorrange 255 mul round cvi
put pop pop pop } bind def /pgfwritesamplegray { pgfcheckcolorrange
16777215 mul round cvi 1 index 0 2 index -16 bitshift put 1 index 1
2 index 65535 and -8 bitshift put 1 index 2 2 index 255 and put pop
} bind def /pgfcheckcolorrange { dup 0.0 lt {pop 0.0} if dup 1.0 gt
{pop 1.0} if } bind def /pgfchanneldepthcmyk 8 def /pgfchanneldepthrgb
8 def /pgfchanneldepthgray 24 def /pgfcolorsamplecmyk 4 string def
/pgfcolorsamplergb 3 string def /pgfcolorsamplegray 3 string def /pgfrangecmyk
[0 1 0 1 0 1 0 1] def /pgfrangergb [0 1 0 1 0 1] def /pgfrangegray
[0 1] def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748073
C80F344B5AC259C63097D5B123C457F41C0C1FBF1FD20DB1F21AB7759580EFAE
05DA4B5F5486FD79F660C4DD1912B77B3EC68B589410B00B4F8BD6CDFAA2F49E
AFDDF799D8C0926DE86A140910821EF2C61BFDB7705FFB5C319091904D2215D2
8DAFF056AEC4ADE5F7EB16708D2BE2CA052982FFE826BC709269D8C09A4DAFBE
BFBA800B42B885DDD5652727A640911B183955048D808915D7BA588590785C36
323E2D204512584029A7E941946AB7D45710ED4393A98B4E23A17008844048B6
23673100660F383E0D2F633C08A3EBDF22FEFA476B92D1B071F543002AE5C575
C80EFD0638B2AE4201F8617D411C52FA6EBA7731007D7E0CF9F915C08D3E2E1F
953AF64129256D7C98661630E2C6DBFB0BB25BB13A147238B954FBCB62B4AEE9
843BB9C8E72B4DD04E427B4214DA804942E732F5332C61623FAB13160DF8B1FE
3B14E0326207DA02D0C286AC4F5CF6B7CEB91C8ED4E24B5E8CE827ABF0F0756A
44F5F11B87631632183F6143B4550B361F25EDBB921C5ABCB503A81425AE15CE
4D37F7E35B3EB042622FAB9BF82D86AA86E8D13C8D471934EE09E33C4FEDDD97
0231A7F74365F8E9C045456D2719080FCC389A3FF3BD1DE845D7B67B980DB8D4
D6AA24AFC8ED8094BE2CD5E721FF8AD3D0959B08F66B8931D93180F66A13E868
C70451308337E1B50D361D971B735BF61EC499EBFF26900917EF154A08607939
311ED672581F3D3F787D180A9306C79AADFA398997C719CD5A7576A3DC785ED9
0CEF5359B26FE5A68B614ECD7739D2D62A21EF80ED53DAE0019F70586B12F418
AEC10A09F0C2A6073BB99C7D3834A598BB67FD60C2955468D5AD0B6939158B66
AEFF4AD76D7B83073CE78791C3CB0B2D26061D0D895139042F4A526261F9D067
DBD077621391C7ADF3F2A754D1D6DC627CB8D85DDFCFBCF3EDF98FA219B2F32D
92B1451B7EAF36BECC5CED2C0D0C3F7742F47CBC2C457799033E7A5B5B1B4A0E
86093C39C65822148C3BDD35213036AD02BB07FD45037AE8A872D1586E4653AC
72994433B7A6782E666F9A49C74F721CEC1E9CACB0E60995CF6457CF08F6506A
F8E824B277DD110951788952C0179C69CC85D5B212185CADA34866939687D1A4
8580F7F0B11F0C7F576AAD7B89946E2ACBC924EB81151D2E296FA045FBD937C5
AEB9EAFFCCD5A61A228310E4DECB36C35E900657F005A44D73EF36836EF27228
76D0FDB54A0B970FDFE472196A930F7E51B9159234B0B8EB1F5E2AB9F7D10CD2
5507DE51BF539EF8A161B73E819B80F7BC667B94AE667B6B1111201CC4143E3F
257890906FEFCF939940FD94650F2AE2BB80F5A0BD1C7A2F726CF74F864A5B31
B170A7AD19CFF147B872F43CDDFED53D723C14D08E511E82228FEB68807EB097
17C997D1E0D6832E5BBA4EB948F861C8C7E0498DE2B6467DAA11848744CA1D78
6AB9B8ECF42FA55819C5FFE42F4B16916E76EDFE8C88FEED6DBF53B10D183B3E
1C44212DE67A96CA9AE19A2FD356ADE572491713AAA9BF5C18ED8EEDEE3FDAA4
32B521C1A090109731C3FE889EB5F2F53D5E7EB8934516B31B9ED6D7898E977D
BCF0BBCD7D2CD30B6FD9F783079B5A2947DB110CA57C634003E4AC3F730139E7
5C6EEDF644558F331E55C9A1614C606A988FA48884C309B3875B8C619FBFE262
7387CFF3D5143C9EF6C6B454C14B43489E5EC10EAA581E6AB0DE87BDB8437FB2
BACC6D518A767DEA108C7F3EAF8CFEF5EC4192EE600E7A0CE5642FEB671EA82A
BEA5D6505375C53C1C54F274A2ABC15EBB3ED8C757A5A7E53B3220627B59CCBB
3FCA5940BD442ADEEB9E0891A62B5B795FE1FB8EF40078DBAB90B08D8E2CD968
BE1C5333D260CAAE77A647138A1D714322F1D67522E273B443AE9820ADB5303C
D0D839F9252EE155D8A4D4B9C26C903940F755381ACF661CD706E4EB08998103
A8263F33AD351E87C6972A1D25D20C4E9041FEF9B699DD0C06C0A2FD237CDA51
8DD0CBF7235799769EF990EE2FBBE24318E2770DBE50ED0DB0DDAF263BBEF295
FFCD490B11631704A5548E5F0256344BDB29BCE6449EEE3F19F798299074CA35
1056EFC255187268CCBC0FF2E710146CB0E95BFE93041D0FC1083391F7F2C760
D94C9DFFAB2D99CC48DE771F6079FEC11BA042CBA121403FA1C2E4F992F90C93
2DAE6267C019B9DE1A12F89228B48A030ED6F378C43DBEE7A6450C83A736479D
F26E8A010104698695A78AE371279CC77F3C89AC8F1622222E83D89EC6501225
7DA5064E0F3EA0B1CB2A23400D9D03A53677964AD1AE18797E6AFDE5CE975088
6C80B7D96924A2CED91A65032FCA67033ECAAB246290E9F2B314845780F50666
2143AC7F27EE86A53E3314F94892D77FBF6F377E25D2EBAAD8AFBC9DFDADFD2B
69692DB496C9CCDDD789D38C643B17E3100DD9DE9BB3C901F18D74A03CCDF062
A1A26978555088A101B9ABBE37A69B9EB54A68FDED4456122D483AE830BE0C10
58168311A786495AAAC92B40E6D67A3B2B8707B2C701111524616DDC2B199CF7
90ED6262043A642D66A3CFFA99FD6AC36D436B89F0FFF57ADC4D7D461ECBACA9
4848B2BF7ECB9AE457FD7712E31BF529DF9465782034F0EEE8420CF6B478F7B1
7982BECED5C38669207847ADD77DCB384C19539BC3B0B029FED20C07398B60C9
6C0CF9FBE043EF7C2EE7F2A4AA9EF432736C2529A518272C9F9FB2DF0780C957
CF1B9734E9F49C0969A2A9661DBBA68175A656514425E96DD970D81D49A0F221
277A52C894A2762C1233B77692A278BCC9B156010BE1C4198E61EF35377E26C7
418C9109DED70E9C9A5E53D1C1C1E4306F83CA58D52A369E8E8645A9E90159AA
49D316055F12C89AF17686542CC2D5F3EC7EA080B1C200EA362277C7562AE7CF
8E481AED2F44CCCB2A1C8F43DCC32331D34FE30953745E24926C9C4DC893D942
C145C2204CFCD6A5C69FEFC25B60E414AA841AD6A54680825267D023FC3381A9
A2CD89BAB9FF6656A0ED50B329ED72DFFF1413E660A1ABCBB9818DED76320080
80C78C427E8E051B99E95D205AD9D09D5093C85A433EAAA96834E66BF8735DC0
F0D401CBFEDF4A833845FEBAE423B351D7DD6BE506F7CADABDB3E88B74445920
36A2427850EBD6C17EF1545EEE457EAFAB26D705842DE204F6FCFDA6BB3538EA
D5C8185DB90E94CE082C9B9A6C7AF788223EFB01D867563247D5A5524E4D9E45
AE549D55363D60D51F4EA052AF7E7E9867FE989B25958FA7B5079BA1DF6C180E
BAB7AD3B0F9AB1914195874CFED7C0517136457774C464F3D8420C3AA24B7130
A94CEF9322DF0CCE8FE0405D523BD80C76DCA40F5946D9266E07CBF681164FEA
F332C19BBC7CA69F270BE9F4B41D0555E6B3D969E12C4E871B28C28135AC83AC
F355B3085E56A4087ED0849BE7D62C7590AFB517178C9DFE59CE8B036E3B067B
364E0F7CC28B3498FEDD429B1B1B8550F2219E7EF9CC64983FF2079110617913
129E86AF607AE1AA2EC54DC6C945807FE9933D1A469A390397432293D3349640
BD48E3DCBEA85E0FA7139DA9D0FD412974B1FFC634AE239533244D8AE9FFF3F5
92BB136F41F11AFA8CC986D798BB33E60C845202556968EA9C711405110541BD
49CF39D8F0E828F6F4B08C859857BCE34B91E51A64CD655A42428332F2357E23
D066595826FBC6EE668580D17392E71EAFD3121D857793F033E18F604C6AE3B8
0E986967B12274346D1DE154C9A6EC3722200E422954F27B5284BF19FC952FF8
D47D723DCAE7E031BC6CAA62BFE0B7BC93FBB87AC0D15C2818BACBAACBD8298A
B19DCDA18BE8B7B5F9D8EDC6BC4100BBE770852E8A76A4387357BDC8C2DB390F
A2BF1C1B653BE9ACA74DD371CBFDADD2A1872141DE6FF4845014B6379A7F72F1
879084A8C8564912E1DF953E18E8C8355D66B32DF73B6BA4CDDEA5E036755693
3433DE557922C20D8C1D4BC1F344CBED41D57668F72DF100F664DEFC88489C3E
88F53FCD7B3F0B6F6C85AC0021252E4554E54BCCD513189D68F0EAE6D1C9DF9C
9CE9447EB37A0AAA9F79F867BBC751984A113EBEDB52FD7160333378FE0CABAE
F3C1B8ACC9DC66783428D739C20F9EF9B7CB7F1D174B2E94953F541C3B84D433
6188FB99AF0D7FA4DA1316C3C5279767142D132F62E948BFC92D1FD382151CA3
7EA407BC8C9B9034EB7994DA2B09613C32B0549273DC7789E792F012CC10486C
74A2C138D9D1C609BC09A2863D88E6E1E499123B1DB62542E6F4B208656D1E71
2A08BB7A4968E508C9294D558161DE6B6EB48F8EEC8A2056B09F7F811A4956CC
AEDBC046F6A8BA977D6EA5B882CC4F9878A8D66077EF43FCDE263DD3C97A099D
2E7595AD00559BDE6DC7DA24C54BEBAF2215E0A332D9D2069E82BB9906811AD9
4C3D01F47C7AA98605E17393BC5B9D08270ED1DB4642AE7A9FF537BD9D0EF53F
019D60539B8F8FBEBFCA5C7E353322834CFB11F0DE4AD4984D3CF0A901E79A31
B041CCD601CC3C8AF5A130B3D15DD5826CB20F310DDAD5C5D67082DBC05F508D
9D74BACBF8346D8CF52D3134048EDBF39A457A04CE4958E1660799E92BD60086
3807F0B349F2C4FA983D9C16D157B758A13A819E1C9A70F46E415E06E899E202
73421CC7BBA00AE88DC43D2E790BDAAD98AC7035197344E1040F2E74B6E9171E
49F4D559DAFA501B4B7B9B21D0718C704E05174BC5EA2C9FEFD5A918EF67289A
8094BA913EE5472DF1C72DB8AAA8F38E110F791A58C344F18EE010EAF988B8A4
BC4B2178A8FBF9815FD463F348E1FE50989D289A4EAA7A807AD171E605FF2DF0
66AC40D717A7E4389C1EFB1739E57FECD8B624A2480AF49C1D1599F86415A04D
8D9D3C21C516433ECB5012643CB80E63A812BF8855C95E28C4EE3C74E8619CAE
CD16F4CF6CF51E17BA4E0A6C00E0BF003429A23835FF9BD43D3090D9A186C44E
04D93AAC27CD60AAB2120169E4AE9992C2DBBE1C182F32F090A8FB38C76993B6
F8276ECB4A3A56E6163F78DFAD94E348149F1C859ED5A7E45EEE48301C8D3110
524D8CA6D2A4FA8DA61D3E7685EB27C9B9EBBD93993CF898405243F043E823CA
475E052E3EDA79EC89F93E8B1E40DC0DCE9912234BD46E66F89B830957187D8C
9067357C061DD596B5756F8524DA4D4A4CFA3A4CB6A7897D0A4C2326FE350781
A1AC0145590031CE908689315F6EF6E1E38B0DCE64D5E00F0E4B6152249BE1D2
E574624318C368BD26BBFBA9DBCE1AC88E6252A856D54270D992D62D4AF0963A
04A0E8B5A959D99D9F95299E215219954BE450275E3CBD13F4A223E320BA94CB
B53775A30CEBF4871073D786A07B109469177D04ABBD15367D3C88D20F023579
47B97145968A4CF2D44DD2063A1D6C42F273CE979246942FD9D5556FFF74CF9C
BE21072AEDD770560779616352D23CB63A4B004CB97DC3C032FD4177C3FEEF7F
D545E2055D874E707FE9E846EFAAE9FEC04589211324538DB8AA6B51D9D3A569
C0B1B06228A2BB08582E21F1C8EE2E47F70F6A1E854FCA43B8EA1D855AB03F1A
2B5FC2FB35A2E170708629ADEBFA4B76F21805CEFBB7731C1C94DB5D5381B885
2530E3EEAC7B7EF6E7D4DBA1144F4AF3557DF5CEA6A51B7EEC4EF00887A57847
572D47BFE287C0939031838CA09B1FB216169736120FE20BDB4DD4EA32CBD0EC
9B7B056ABC55D594242172ABB935589BAC5913D9EBC6110049EF12043D124191
CBC233741858491E69E92BBB5FF58F6E2F7FC1CC934DA744D88B30912DCDC8E2
D1ABEE9F9B814DEB1B5E12DE02177665A098296C5DE8D29CA2458D910B9D536D
8823B4DFC3165A4D3D78188D258059FFBDF643B183A012E4AD967189503CE47F
2ECEA39DC25B9B2F4C67806403933E7A70EB2428C2353E1CD0546C42DFD48DAD
D452E79000268A43321E9D827B93316EC74A4CBF3B3230B5CC364C47D3D29EE0
588595B7BFB658A0E3A290592E37C06D4D244ACA5E68F536C8E6BABA770E2A53
783D257550493EFF3787E35BA29FDFAAEFFF30FFE628BDF30E255B170D476F88
7C13BF53DD5E31CBFEAD1094D2E20586FE1FA353A977A4B42AADA8973776B765
76A34E0C346A7180A62B214E0150F0D81BCF78B0C0789C34A4A6411BFC6D58B7
C347BA22A783FE35E6A18C2DA569F70B74F3B4B93AEBDE8E559EA8A0F73491E3
531957CFB9E539909DCA5323860D4F115910401F16A7F4CD9A4E24A407D4A6A2
4206A4FB29BE2E6AB7F92176B05A3EADA3DDD3949C476C561FF8106FBA9DCC9B
8BE215E2A488E5AF4F014F6512FDB11061E9035A31E566EA977E3DD5A0BF3DD7
CC771FCBD1AAD4A905E5FC926E7D40F717CD0384D32E7D2C0E5A781FB64898EE
28046E0422087B1C1AA7D79C2F7A17354AE4E8FC9E7196192F112571463BF505
F49DB00718DB098EBE9621CB8C5049E016882B5B645F85040A74EDC83F2EB613
3E1060889555E3739E40BDC6AC409C897F658C644D601FA6467A14524ABC18CA
182884E1B18F17ADA1E076D8E09257DA85641090185736C9A5B643259BB7FDCB
4D9F383D5264CE9285CF1B7FCA794F488E0F50B0B6774EBAB55F4A12CFE0E59B
E6FF73ADAC086DFFF7DF9336D2752C9A974916E2B05BC28132659ABC369B1BFC
9E75B7700DA016C303CF97F3BD1E664F0EBF10F3E951EC7B3F0CA985E44327C8
BCAF9DF25149D52E07CE060AD089C66D4A184D4F2C4D6F5588AC95E28A3E5743
71F4D1F02AD02185A930241BC1781EAEBB3F1DCCFEB4AF08F1B1CDBCDC14243F
F3B4F93A62C3019AD6302D06039D9A8818035009F30B43959CF11834EB7BD840
904C455C9097E1D1054EE02C2DE213B03DA95F8B7E6CF21F9A7C9E45136C0CE9
ADF473743405C8073B7E09D896A8B24A5758AD679FA24343A97AB56E17F004B9
646283DDB5C3BD9AE03C8896245BE7A33E2BB9FDDEB85783FFB41C534AB47745
5F7B56B66ECD83733034C3B12C33100F0903620E6EA0F72C130112BFA6A8769D
EAEF10C001700793BCF5082EAAAEF31D36C7B163E0B871D41624D79E3F427678
7C0C0408B43EBB616B724BB45EB72CC8F4860E0E8EFA1649143F97950F096E8E
1701C1632245271011BE5AEA9C4C1BEBDC8C828C53277A0B28DAE5DD65836BDF
13F079A535CEC71E9547797F04074DEB4E8B41E53014E030189B53F8CC06186C
E9CD307FA6198DF0AC28C3659ED51DFB11300BA49FC690648F9842E8A86FAB44
ECB764AE3BBF971D0F56AEC21E84EAB94C2F24047471A21924FCEB6B65A19E1E
17FCEC338D47CFF82B71FC307AB439B420EA17C29680D7C8F80B96F179E52CE2
BA08DE61C3F7057EA1E007A9823C4F7564D66DC7725300F2FD36820A502C2BEA
5EF2ECA6179642DD05FDBC4E99E3B222DCB48C2B287ECE6362D72AD325681ED1
80DDD9A55E1ACB62B0870762361A49BB5C63D3E8C6A95D293044E0A8E2593CE3
CBA7DC319423A206D7EC3DB35F60ADF3676C86655F736FDC0335981B4846C537
BE3E6EC73D93875CF69713CEFAFE447059E2F54A088F8D9C366CFA2931ED4BEE
316E06C0A5EEADC3931EA35E07CC3AB03634FB8A5A60FA170277078E2027F29F
1FF7B7DFD2EB5B84942ED6C02FE9EAE1AF6A10C2B09B2D4C7B96DAB6637D3E01
A6084FE73DE192086DBAD518ABA1323DE819895785C9BBF0F181AF125DD52996
2248357AB5902E9240A715E88C2AB7711351DEAC9AAE5FD228EB341CF68FCDA8
9A0841D92B2A9F856FA5A976A9715AFB1C4F0499F7E9B7EBA4B9F409E8B255C5
ADA609288261B153E62E0FC0D1EB0C0FE277FB5B381C75533DAC27FFB343201D
2EE9865B0FAB14F72F7285B4699A1DD319BB627E9636697FBE242F7E8584C009
B501D2E542B8BABC9718FF0E3112A66D52F0680CE9E75B0D2D7F72B9898C8162
770371FAE39F73535D62A3F0CFFB5772F0B3FF7635A06B7C05ADB5A29BCE2CA0
6A5F153005AC8162D3AF2B3F9905464D9C0E4F0EFD1ECA191EB631A212865599
4DA90C3772741EE3DA52B55B3CEA296A4710BAA625B9A14F7A71E675B9C79067
7486F847491D3B4E5F8462F32E38BEFB792B0FD75D8A9AA4D158B61E5E285C5A
09A73B112CDBC95BD9AB322BA3F890637591635B7F50563A11AE21293F599AD4
7D00E294BD8AE7E18FB9D421729E63159DAD5C2973FD4EEF76F102D6E8A005EC
FEB60C2A7F5FFABCC356AD689ADB4C2C412A15F006CADD9D286D09D1369E1BB3
258E3BE15660C9D4357573560A978021C417E929AB0717901125D381D8F60712
EC7D2A377B99125D67F5FE46F2EBC4A80D91269B8A75A69CC6C85CEF67929DC6
FB45C35D75793BFDEBAF6B4AD4F3E9549B6CFA24387CF0F1F2D53673C6B6ED2C
BA57CD9328D7C27F54F9355C5D324255D7CA5ED95FC4BC3BA3CEED11A4AC6737
027C0CE211B2C1397879ACCA8E1A69C69F25959EBD0BF097A3ABA743E6123D87
318E1E71CEFADCDE8F1BBAA2AFA81B40ECB13052CC691FAE86A131EB5C6734DF
8DFB1D9AC1D2C9852A486FC76780151785DEC54B4452C0D5DC01CC67E71F4963
C5E47E46A5F0E50D43C0175FA308506B58816B0C6711CB510FCD69743B93183B
8F2F51E63D2718C148F132D469C69DB9F620A0132209B9EF01EA4F8C03D8D70F
FAAB32339F37E8E8F8784735935194CCDF18C416165E8CF72360400AB08B3C80
B960CEBAC1EAD39783C50A7E73F7A94436987981F2F26E749C400E1434101C88
B495F579F275C613BA7BBF5CEBCEB5CC8196A31A56F1869A0295841DE8369B69
645EF7614D4941F90EE21FBA07073E6366749297035D4B543DF740439F777F7D
CF796FDA9506AA346D44340BFCF97424123A0F37196A6C1F55963A5A546C9F58
3392556827DE1198F90E1C0A85CD89CEAE2E15FBFC7798A4A09F1AB25A4AFD12
601E4DAC705E1B15605A9E041C98B1C14485182D09A2D073FB11F1FD612300B8
88D0AAA6C02643BBF7F5014D3229E9C57890E477E7E9D0FC248925DA8A2D2973
5BB33F9CA7B7D71F66F79416BC14D5A7C225D055D673BFB794540C5C815B29E8
AF332BCF5DAC86D20639C623E36386D1FA7A4C033912717B2B487BBE25D12A58
FDEC8773F534130A2E35BC7A5B48BA8741003E18B59DFA5735A089A4AD013050
90B59D66A214401C83EE7D11141726D8F5F53EE0247E8D00D77C50758B596FC7
AA7D5606362DC0DFFE06368A934600A1A60703A153F060A8FBD9300B9685AB84
7A304322149D0A59237266D4E7640779B47C5C660F75B5FAA321D3E18357791F
6476DEB12A0CE4FD730050EA5CE139208A5E22A6FAC67AB61B4A077205575FC6
BF5975095301CEAD7DA05656DA66C87849B0DCC05E6CCEB9DA73E82D91EB4173
20404C02E49DA87D670C51DA2351FDD9668E4C2B892174434B1100400F9958DE
2AA7E4CB7DE96015177EA2E7482345CE3569A6FE9CD869E2EB13B28C714C5497
27D4B3C977CEB49CCAA8575F528E015446F2147F3DB38113807B755D04FD6B88
7162EC4EA8431AC351F9B083F6840726FDBF6126085980C3C924E340830F159E
F14A09A03A9BE50FE724E23D7DD0B7D8C72BF8A60611BCAF3832C1AFBDBA1F96
3D24094BA96CD1262D2E16A7D65C63145AB39667E1B4017C1D997113ABE49610
8DC564A9CC2F4831D45A9E6A0CEAD8AA6526BDA3A54E7FE35E5C5F6CE09167C1
A7EF79B6DFF9FA4F370B6E5A51A722BA03B6E694B72F04C44BC83F77896C8CC5
F969406B64D1652509071D86ED90543A1E304348F17F213E3A94D25DC88EB473
5003CC172C7D6A744647D6FEFE467492775F4A5433BD121E5F1BB04EFC43C6A6
BC5505F11E43AB88701FCB7061A1F5E8528479C1DA1E484C2420ADC668F727AE
310C021D8DE3EF7D6FF041AEAF063545FD2EC42E4C05C892E017EF4CB52B4C25
4163A86E166DE1CC0A3F98AAFE731777A02D5F9395B7B8B0622D46AAAB5E414A
1E09D429E9EEE56EC57A48F7340B66ADD89928286110D0A59BD2037D62678075
8D5C5EACC3B5966695149BD02F059BB272AA8F54CF544E747A541ECF7D69C638
3DD60D5E50918B26D75CEDEA499ED860D039E8A63BC86893A5D19A2A4F2CEB3F
E5DB42B8C7DD949D8D7453D7E2D098B451D722E46E5ECB959025F5E3E92D9F1A
C67953A02405118E14B3B4F952174A5DDDA960ECE40FDFE805AEA1D91687298F
BE4C1DD7D2C5E7B101135871748FAA754C2FDF8643151C320EB8BD933450DC09
1B59A1A4FE3BBE5D97A41300CA0CDFAA05A0298CC43B17992782578E65DE52FC
5EE805057D8FF96C9DE8C27C1744FBBBBB52F19DD898B587683FCA28DA06F81C
1CF90C1EB32CC3E8B889C843BE4719F730F0A5813911E2567E7BE016404F6DD2
B7F49BB416E839A2AB4528D07D7CB660FEDD0593A320434ECCF6E4BBBC6C4462
3622E0AEFB3EE131AB759394A0B283617B873319CF018E34AEC3E9066E2423F3
9FA921B837D1889A3B8076B128F9938A1EE683CE4FA35C3DD06BF8359DD3E47C
7E930DD0AD691005E04EBA844B0B2A58A1CB18F9AD08771B123376B4752604E1
26064BCC9406FA2ECB2D84388FC40997F7896FC969033E967B7462F5351D3EE0
A98313AD0287E2694C35D8EACD28A381C1D1D39AF0F9381683D5CFAFBEA7E434
59D539FAF90A94719448A05813F8FECE539095C1DC170F7D9E656AF881D8AC7A
7F3EC3368B3614F9F931586B45FA35AD4F95C41997568CC645E8215A7F9D3172
0C381221DBCE395C8332285FA486E2DB5EBBBEE393D5606E66553D2F8687D95B
83846530A868AA06C057436A48EFB661601859FBAC6CA73A1B81F54E2EB07C7D
AE3BDC76E260E07A0246BA9CF8454BFB63616CFEA015F3E7737E8A3FAEC1B6B4
BE7A0C5CAC0F91072DE8CD01C9265D07FC48E372F2219C3A87C8272FFA88EF47
75C4F36FC0E224FF844CE4FBD081E9B29EC39402D4642AA8F7D849D98E06E800
FD6DD7C7E3DEA36271B98C20AEFFCF1AC833067C7867962D63C1367205313CBB
27C3D8027801AC338D637544036237B189536D8631D849537A307B9CF2893555
F2D5721D560AB9FDF5CA57E4150AEAF7A92C176164023CA8B86DCE17D7AAC28A
97EAA00CA16D9E3A9687178CC8CA5589BE3A2A4701930BF9C403CCD9D3370588
587786CA9B747EA5A26F787AC90A826538787B50D1F51326A20038C2F1C25E87
865DCDB5A77EDA3AE06F8459FE400A28135CB0804164A4C16F83D7A924D94094
928A1F7C98831D64F17B625F885326948DDE8B17669B7906826F24EDCFDA51CF
D7CFF4D71B74C3D81BE33C7F612605F875C954E303F0F9986CB5696311710D09
A50953F78EA9D99E54D65AE32A66003D42A8AAF5ECF139A3BB593875CF62F9FE
2CC9BD25B7CD3850EA8D079B8AC29F6E9656AD562BC47631BEE0DCBC344D3294
3B0385EE76C8B747C23F139367C7566123EF65E6673C069CC3AE80A839FDD380
CB01E152C7BFE2FBEEAE862BD60459143270F679BFB341AF5D5E6666480A2AE6
F94D126BAFB7DF1409C7F5D36258F869370B0ADC6F747FC0A1D518590B790326
1C657A46E4890739EDEC16C0444215EB596726C4C4788DCF546769F9E4D00BC0
A6BC5B8F0A5398B727DA2B45CCDD49B0EDF9917F1B6CB5168F9A1C1EEFCC7A70
AC4984E6FBB5643DD043127FCC7259EA7DD4F4A2853DFA72F7D87B70E0703D48
EB706C934A45F41ADEDE0979219F93C915E04F5F7DAB606DF7B672CAA215672D
617A91EA702536EF2FF698435AC3DA3CCD291CBF6C81D3CD7E733D39448E750A
8F6728F3684F82E805F1E57301E893C99BAEB12FDA218E66B2A636285232D632
0E437C000FE3CC643B16984B06C06480FB812A857103C0B82D83BE23E3981EDD
6E5720F72699F4F5D4A9CC185AF01E63A9A6222236260A5D8C930975049A2B0A
353AD52AF600FC2F6EC28F87D44D0457B74DC2204116186EC2590E53A7F73173
4A84E23C5E35F06C33CC9FF1114CD4EA590FB7058AE510837C5D6A8C84284973
D4AB420BAAEE6377AD603B5D2914C3A34ED17C97E7F3DE8DCDD524AB47133D46
32AFA1CA159F7C9017F699E6DBDFD72EEF344725003FACDD7122C06F8BB90651
69164F0F9C6137D54C5DE80054CD29708D3104251D624C82B45B9B9C7F22E18A
BF2E632E0B1BAE48549643B702E0C736157CE61835C776722C337CEBAD5064B1
3578799A57B852E6C7A9D59E3B0FB1EABA5D6BA950ECA0323E322337ABF5AE75
CA9BF5D032428C5F2A149802C6FF51CE03D5EC880A65189CAC903DB6F9B8414B
9D884396A4A3EB4DE38500C7AE15976B88B9C5E636A0B051BACB28764C4E3D08
7B426E0F87354DA83D5F1110645233F04C0AB4BC87B3300A7C02F6EEA04C5C79
849C6266BB23504F22BD601D18BCE47F79CE6594445F20E8584C0DB7F8C4D42C
EEFDE3059A54B43F0635E17F0604DB7D9606D33AE0A1F44E89E3606E471AA62F
275A8B54F27058EF9106C1DE7EE25E9C741EAFBB05C873A5C8BBFAD06E11D5F7
8F8D81F085A9CD10286356774A2960CDE8A409D829618DB4FAE0AC14D14386ED
B1B9E4D5B06028A77894F7832F7D4622EA9DAE0C242DDE64CAC4C8AA2A50740A
32AE499B647762E02B13EADE64C8D623B66E03B65CB5F49D12EFF4BC018FF201
D56815F3865AC60A61691E001FFC40EDAE7F83601FD6813DC609CE9EC6215849
F10C86D6EDFBFA1E8FE07D3E0460811373138D74BE3450158134F5E9183DF9A4
6B40D513E3A093C4DBCA404B8C67EC81229E64FF5C5C9B0BFB870FE9DE3D0A85
F87288D9F79BFEA6EF51FB94FCE07B47E0497A7FE8C305D2471CC79FFA85ECF2
E0FB9BFE4E181932ACA07134C1F6F98C719D1C7088F48504C509E35596414572
228E0B690D733300658B7471070678603F32248ED998384516AFFA1EF64F14D0
0EAE259EE33700057198BF26E84DC45C6EFB778A33C874E4C999EB598DF1C833
DC28B9F4046834AA01C1723ECE01CBECD48B54DCD6096D33813162C2411DCC81
675AECF2562DECF547D134EE8B0992248A2A11E3537A91CFD8963DBD76B2E66F
6BA20097766D9FAD37496C3E4D38FFC46959DEE705AF2DC1248465C561CCEA2B
B85896F2973942DB660DB216581C4D75D28ECBAA1344AD733EB77AD68E2A13CC
5CCEC6E04BA0E04BC56A1DE9AF992B460B115ECAED0620B8DE35E962159E1659
F1C514FC210635CDC596702C34FCA2DE56D84D7D19053E40188AB4C0EA2D93A0
8C5BEFC00BFA26266B80AD48B151F1435AEFDCC5EA05AAC246EDC07C0E711324
2002EC088DF27FEE2F096DBC80EA7F2BA9FE84E92F83A9F55C2D2DA5C98448CB
6BE813F413A563D965E3AF19AF76E2DD9145C0965CE85AB38A90E5B803EC5328
70291267B1C82E17F361725128806F734A08310B8DDFB26995F9757E5EAC3FD3
8EB8CF379E54443F72AADF139106B72AC5C430625EC07CB9F70F6958DDC8F48C
109ECF6520487C31C0AAB096BA5DBECDF8B0223560FDC74EC76E18E08D7103A6
A87C43539819F3FB1A1DC3E5A27617CB72E27C20626A3887B13ADDA276FCD733
80958156B5F9E365FE7C28445E1CC45FD72BEC55A2EB3146702F3F200E441CAB
7CF1A7E07AA1D09848B87ECD938A1BD76C977D95B1B9A08E31CDE53139ABD753
F7545A6AB33167ACEAD85F6B0B6CD1579B5FBC4A068D3719EA0A8FADFE0EC56B
77BCE8BC5037F41FC4AD281D600F3D69697E4999979EAD11CD68D30B047D8613
80F3A70E2BB01C12C44BB90AD65F887FFD954CDDEBCC869E3FD690F46A3806E8
A6F3BA11A2E802D29094617A900B51ABB55C22B297ED31E46B329D3148B4234B
C952F8929746CA96A37BDF244BA1A97212E8AB907A6FAE2EFF5694F551BBFB31
71954CF69B1C7A5BB52CB4EB810EF039A83540939B9C3663489929BAEFDC0C75
317286D402207B801425C497D616F9950B415B5AB9E83045F1BC41B4265FFC08
7EDC1B9B45A22737FA643F35C6D9287FA97D11247FC91D29E96CEC6EE54FEABD
1B72E4E754B7EDF98F974AE34E22269BEAB1BE5A04C8382C4D0C8CC28092BAF7
107DD79D2B2E82F611C7A3A8407E67655BBA267023EF110AE49501F31AB198A6
1894465D10A79490B6E08AF1D4C528C4B98810D47798A90886447443F9AE0E43
EA35F60363797B457E5F7FC29B9C0F943CD9B5A213F37E29C9EE4AA8C973CBE2
C819CE4F91FC0FFC372A13C9753F3D5D4D7F6D1379CC42E26B85D01D4800C722
B0042B0CE389C3D202DD000AD6326C3B887510BAA4013BF19D10EA4E3BD8349A
5B9A604345A7395B786751A40C88E1522CAB090AA1B5B46BEC60370D2C1592B9
8DA68780B8DD0602277C8B70F8A2D3980184BB76F77A0C8FB397EFA5476D9387
B148EE3C04ABB84EDBCC1CABE7FDE46D9073B0310E487CC8060F56614785D79C
F2CA88071778074DCB62458FA831ED2C47AFBADB70D0DD276ECF5D5730520DFC
CCC97F21EFC67664B7F534BA2D94015EF3E71AA1BC38B1AF51B2D2A644136F12
3EF1688EE71BB8194683A9D0CCC8D0E4A3A184BBF57118C0E5B682905CFBD137
B6E7F025BDAA53342F2D39F4824E1363786F6FBF12764EEFF319BD854807107F
D8834378D480C48C4908E705166CAED241DA34CAD39E2ED282E12429E67978B6
F4182827A6FAB5F2CFCE67C19332DE1348F461BB3D963DF7B5EB205E6BCB2AD2
63CC857651B7F1F9366336F9CA1537E376DAEC04050C8171D2357AEC98EC6EE9
8666CADB25C162EE16D229C877E941593ADDEEA943DF0206EA4B69FE8D49C0D3
9917058872A3D11DC2A35031E32880C55766EA10553FF7B1BC59195A8D927878
58772A01584905055D5ACD204E5D3FAFF2E583039DC441697C5DAAAE3F09906D
4CFE1781886268DE3E60D4381BC43789DB1C2D91AFEAFD9F6D67FFEE42058D73
745EE1B416C4C53724DB9B7513EDEAB9340DAED23AA76AAB6E364BEE4F668E57
5F5131E6E5A8C6C02BF8E886979CD21368CCA211AE04AFB3BE3803278CDE827D
78BB6A5FE2C616C13EECA9344786D4D295064BCE4358B652E30D2E0AABE8DB0B
D98C8B27D19873E467ACD98ABF84D57B256A608342FC623E6BF852FD1E610677
1EC5EA59B4DBB175D87ED3CF73BC58213F404FB4755149C7DB0FEEF673AED3BC
E81A5719DC3F0052E0C64D49CA2E6113B9C4FA3555B09E82E869B165E3D2F4D6
B9C7E5824174BB898DE590DA100BB1D0983E4732B586DCB45125A54B5AC68359
C339A89DCF49F3695D29EE505CA48259CA2130FCD4FDD5EC33E61F12FD9AA105
B33A39A5217183DC152391890975A546C8C12EC919B0473CC32160D9A8E4A711
CAF57B4F74F2D03771270219544F9E3AF093059D45592EC1C62092FD7C644466
3FD6CE5E7EBE2DB93308B29DAC2BF0252FB98A43E7BC012E9A7E64D0CF17F8CA
15DDA3816D77208E98FF06510B19C889A0B154164CDDBCA27DE0C353AC62F7E9
846B37E763C6B2A964E67AA4446F115040BFA8AA242765AC47E0FC271A538663
62BEFDD065E645956C5A75F517E274364E4A307EE1717127F9A90BA81FB156D9
F10681D6B49E0A385625E70230149D2B76FB5495BED43A049B187502A725E328
84F4E2F9D2FB78C661D82E1E57B72E084A92F28634E3C88FE30F30D5B89E08DE
912D0172078EF99BE9DDEF91E905C5A2F07513AB53AAEB49F95110D0F21AFC98
5D798FCEA1A90A08D0D2B1465AB09049E812C244D8E58DE8BCD92DEBC813A7DE
E552967A7CD423F2D0C5A6CCBCE74A4D87E30FF2A0F5AB9AEC7CFBED1ED7E2EB
D89617313335419C13230986EFC24974D191B7A908B3AD10D546309ADB22EFA7
3C44876ABB67C27773F0E3C358CB190B2A626CEE76B4EF7FE295C49291F3EC74
29769E672056E3591A20E6F829C70C89A0D7EABA4D1CC895FC6F583D42E235A0
135A73742F66F53DEB6414397491C1B9318C9254E57E2496D4EE8CC4F6E876D6
4BDCA27C4E4338A210B00FA2F9D8012E91731FCDCF4B9FFF8205EEBF7607A2B6
A62EBFCA387C4C817E8F0B4ECFF8C0E306961A0EA0C66D8ABD1A6A29C1F67244
760A9623FEC33741DE66626596A262DC1D4CD143354CD9D77E70C1F50955105C
3A48CF9D77191125B04A0B7648BE50C23AD11D38E8BF92C6EA7A641904B70441
F782AB882A093BBEF6F7FD60A969EF4A694F1B5FC1D607DE7EADA72FF4B3F72C
50CBAD42E465253D87234B19FF61ADB478DB530F5AD83A96069BBF99C339A60F
A825526C46E81DE50B001A6B9CA0B44966E327D44108CCA68C5CF4155C16A385
A6AAFA08FE51063535F57555F38BD5F76127200DAD4A954BA64ACA4D5A0E35D1
BB66C20ADAE1A7314A4346541DF6D3B05C6266F8CA94845E741637E685DB2B92
CEF7408DD4B9A5BBCD46B7A5380CE7F8ABEEAB1CCF41CCDAD004A9F8CD0C1688
174194D9BF4B59913FFDC4E482D38166A938CB52F8581B2C6F2A538BD6CC75C2
853427D0DD8D31E6D7E77C47F0416CDC79E0105658445924E2C5490AD228E213
2B8AC9B9CDBD20DC1425A4A4AB64191C702968
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC111688DE12
D35EADEF3243D6377A3CCDF0E5754C8509A44A40F838AD8B0682CF6FBF29302B
243192B9041EE868CC8103526C7DFF028DF85F2ED913B16022E06A761A62B391
A08E4CFA1B806DD6B0557683C1F73C5C8DDE321B1BABF9616E20B6B12B517C1E
389E7A85FDEBC0D6834EBA8A4703D4D84D1B7BC44064F2EE2B5D0646CD2C6ABE
DCF6F3ED9181CFAC6D5546FE69800ED5DAFFE353929EE38464952A74653881E1
35C695568ECD1640C8FE19CDAE0A1A00DC798E57E963DA36716FA250FD983574
D06F88861882EF3B6E6090245BE7A3DC5CB4A60C72B62704A385C873604771A5
8D2FD3034EF423860093D81FFA11EFC86F912171C1B58B5FE8506C4330DA185C
E61BE5B93DF45D0AD1FDAF194F7DCD648D8F14A5264B6277B6B9802F7D2702DB
352D0874442B2074859EB49313BC24762975AEC0D0D84A962DD0A04F4B6B420E
0A9814BE9B2B8C2CF1919579C0EABEB306843F230D5D210FC4496DA73D0D402F
3CAFC7DD736BB0C487962473062667D000AE87A0F2AB99689F12B25A7E3E9266
6F3C0B486DA8D9109C6B1726E4FE8C3B7F5F2F288CE75AA0B1EC678BB3B45FBE
BD4988B5ACFD71B15DD33ADDC5816773D7C81B519D9271C3B990C4709BB951B2
4B134C8E807806C7D90F8C2414CA1669749E13E6748CDBD77997D5E6F66432E6
7AA486B7CED4F7EF4A08743DF7DA94D2E6C23FBF532ADEE256CD4954D8D8F257
466803DFD8AAFE4A0CDBA36E71C609F729E5B266A1D06A3A7B66CDF9839B8144
FCD82130E6CE8CE152B40CD2B8C5CA59A58BF16C058CEAA70D7C758350587F24
8ECCE544FE6765A8126EA508E171DD6555B895F6DF92BD9DDAAA2086E7D346EA
AD0FD911F1D484563DD038529060B541F6E27060A85FFAD1B25FD01AC3E78750
666AA858B0E0A0C08504B61B2808F51CD36F72A8C422C060B15F1F8348E3E326
F2383C1CAB8F5D6C44205FD52E06B2E9D24E978B1EBB6C46E49D4F534056EAC7
91FFB4960FC4DDBD308996F34B91888346DDAA35EA9DA7E8FB53C880F99F95BA
D2D55CB7FD7A61EB9BED348D40DD39B82CF2450CC979E494464447C4167C1825
F5075EFA01813383E256A90AF35925E399D101B7ECAFC15A5C08781E967A45B5
74790D728149AF049CD36081D2D6DE8BB2CE69BDEEFDC02DCA744C93E9EA6859
D98A681BED9A594F17037CDFA5ADB9008DC56C55084EE590D2BD58FD9784BCDC
C3D498B5EB214394EB590AA8FC25CD27BD69A7BAD0FE4EB738D2F1F2021CB8AE
33E9C8D193B12D8ACA5E4E06FD5455B4F8ABCE271B90B9F6EC3AC2D43E99D949
9513B153E24D338069168B633C7C2E8E06B51B0912B8781EA6F98E00E8851A02
241D1A86251C5C7EB1059BB20A3E0808C8097F4B881728FF9E1E77A6A2B53574
0C9112CE19BB16FE9C2BBA6E48477003B00996A56358D63EA201AFF2276FB845
027BBC4F4A0D6997E2E4458E4CB6997A5608992A551A98683763736148F1808F
D56B15923CAB0A8F3DCC1AC742C19F0EA24196A54A0E5F4C6CC11516C68AB5BD
000DC620EC0118A7769DE8408EF1ABFE7D3672D76A747A1D0E261860B3314B61
BBC577ED03D63028C0AC448FC22B7FDABFE16EFDE65CF4D1320C0B5050748EC3
45F7412D006CCFEBD0E262FFCA58020ADCA1F99D1C50900D31E78E7B1708AADA
0925D594DB623C1B58B8684AA0C7CC2830835FD377E00C7DBDBC3A2B5338B14C
93F707D408B7624E0116CD08A59EF79E5D7A9AF1DD9809395DC9CC051494F704
AD4A223665931F726C32E2B4E7D94AD528C8B876DA1DA40596F048A31C4BF5DB
9F29ECAB193C45F75C84AEB4A75DE0260A844F2CB1FE72137DC305EB09F41300
41451042B4DA33EEAD81CD6FDD7E2DB73D4DA7446B684FD9084AC279F59498CE
DAFACA7F27E622072415D1089BE4A5062E884D87292FB6901DE658362FA3158F
3EE4C5CA5FB8304D10C30FED2EEAFD9586855F52C4621EB4E92A3E94EEA99754
7C7C7B08271C740B810889D917433B097925385B8A76DA8DB0222632CE99D777
FDC71E240B15320C0DECB4D0D4C2506B7751CF4579C1DE09BCF6732A31B4FF76
D120DE0755EEE6F50ABCA8D23F22A09282A6548E395B9FAA0B9939BE70A2E1B9
7096ACEC72A560694414874814FD94286B1A600828D16EB7829A7B0904ECB269
136EA483FF21A6D13DEFE26C32A0C18714CB01B1D8CA55654962C8EC274D26FA
F94165BEB4FE27A670B47A60D044B7A6982E322574B139AC829BEF2822A66CC4
0C713D53FB4E63B07CB2B993D6A8034E3FF7ED090487B68A17330B8FF9043741
49B4F24A34011B13502E30C5D7CBAE8463A6FF99673A90F487A664D285256B40
E00E70F83A464751FCB5380F7F76128843DF49C84B161EA84A26C8D6E6B127A3
809F8DDFDD7B4DDDCF50ED36149D8649C7AEB4A8E8B080A7AC7A3F8A6C100F0C
AEFDF36DB986C6C618AAF502DCD93C4F045E2F1B85BD8C3DF837579CC3DB3865
524C9D7C8B26D7E18A0C92C8B3B22AEEDF82094C4E0EEB5AE2791A08217180AE
154347E300B340297BB07442F6EF0C0AAB29A3D492E2E2DB3345CF4583596316
FB577CF2561F5C32BADA6F0B5E369CCAE3372C008BA1917A296C2BA59EDC5359
2A8D06A25135505CA2CCA8F6A24A9B92DAE1F18879B12EAA05DEC5A6772CC798
AD1FB84E0DBA4681990C07641D9BF2168D5847B5F0E059D63A507BD43A8DCE0A
51E8FB8D95467A22912F05D1CD18F7FE5FA60F8F48E2604F7775BCC1B2C8D0AA
76870828E5A3401A97F5DF6CE47CF745E42FF3E745D7FD26A1AB03592F93722F
7F2B6C5C147E08CC4F8AEF8C56CA21DD38296735292FAE18CFDE8CACD53D9690
DCF5194F7F0E9BF94B1DFA4E161B1405F8CCAA8F41AF7E88600DF39A68866F1D
B00B9E7AFA55F2F55F456F8208C188FD73469C4B2FB410F270E32762530F0B2E
82E58BCB9BE047B377F3257BCD12030D71140AE60244DAA7CD767C726E7BF288
414284CCC3E6FB3DB1BB7B596708B8642BB1BBDC37026546E6537F776BC0C412
F86A496E7C77173A0CDA0BCC46683C239700C90CD50DC093C9E693265E828A44
1345EA5C4EECC58CAB72B9A4210FFE6617ED0227C22C9FBE46B6972990420811
9AABAC1F233E8A6C4B4853C9ABE5BF2E6C34ACDC031FBB3F15EC0DB085021F9A
A64EFECDD7BE5A122173C64F041B70F8B2B13652008C125C749F603066175681
79DF1D96F5D2C871A038D32174ED5C933E8C855ACE452BE663A7C88AB8C8BB8E
E9BEB7B6BCE7C2C70D6C7FD73E938B857E9B1064CCEF0B4600A60B0C8FC8A58B
685E0F60000ECD6C890E7FE7FC6B80C0779D7BF0165E06B4D2EE1464FA67797A
C38501BF9E608EE11FC47C9E002D2D4C63ECE99AC89A44D64F8AB48ED97D98A6
3E29219C07FB82A91682C9E569A09DB0BEAA8593F9605DBB1E097EB93C90A456
BBA722583F1B53C1EB91A7F6D01B1AC7062BEC38FBE74B142FDAC078B7623419
660D079F71D6B56035D50755DDF6C0280A48844B83586C8B579975B06412ED05
C3F03C0F93AFF4095B5DE223F662FB3B3C1B14242BB6EA2D176AB9569307C15E
EF2998F8159AC206243167C152414AFBE3357B279034831B3E4FC992950E4C0F
C0338BDA52A1542B27824D2129BA77A3F888F990BAD4D1810A9046288D9C33E4
0216F1B55B5750909EE5A9631E04F67D31EA5D4BF669B2356B628BBE87506B6E
FE05DC693810FB0947FF740D55CF1C7B04436F5076398F44159AA77D2794F0C3
0A786C8C6E76A951873B419669C19123B724B353CF934C06B895687A3F0DEA8B
7F4F8013345CDBA402EDA6A1DF58D3C0E6C6C3C349692C67910040BBCEB10A11
7DE0296D4F6D3AC184BDB890A0DD4D7C62B15DC2AC355013374B68132A30576D
4DBD04EAC244CAD6FF57062D8E062552AB41688EB7E6869190C0E77E0EFC9554
981D7C999B88588E3BDEA834A3B0F64592C48E07B6A47EEF5191B9AC2F2B9589
BB5E885F1F428E39A60649E065F147D6F231B461D0A5B6A78C387BC524958CAD
8E701DA8718AB74E76FA76DE126C6F2B1CB3462FCE34441BB0FF4C066F2AFC78
95A30923C90100674594C2A9911CAE149E47473AFB062C52B13AF8DD94854462
FFDFA8C5B915D93466C66FFE9556D69979EFE7DD8E440AB92C00EC341E4F38E1
9D26A7461FBD7715BA7AA3BCEC0FCDBBE065A4076A4D467AB6C0ADA3D52C6EE7
65F2E8A29E6C83576007708DEA22002CB980F498103B7930F0425B73DF9710A6
9FE60ADB233721C346E9169D885AF04A9E3428F6BC4628A88D4B2DAE06AC47A5
A9324900572B2D965461C49A24A118E5289790E36EA78D8683C3495A671BEDCD
DB461400563BB49F632697F4E37E5417566F86875A93A3E0B05CBE845E2E2F85
1AF557C165DB4ADBB1652A3583ABE38CE55C584D2618007F48225FC094C1564E
2626692F1C248D54C82E7BD9251AA6EC42D9421CAE132B0C351863A88EF8E3A2
55BB913302B1AB67777E28EEF2FCF6D53C4C3BC877FAEF370919683E613B3BAE
0559AE2EB23B782AC6B6FBBA8C048906F0611A592B2C4487C4332B0754F3EC10
D9DD93B27CB65DEE4723223B3512A0A19A7E1F17D9859BBFA5EF728C45A6E4EC
19A568A87C5047FA4AD5D30B9B66C6B06E20CA5B18E86D996D7F2A94175DFB9E
11A2C0D153999F1101EFED7759E39C831DA47BD4A0449438667BC8E498A4419A
69F3E76C4A1DB85360D56B2BD8831C8FC029A606FAD9B8CD1D06DCC925B46200
97A432E041F32587DB6875B89193965D50CD711EAC252F618A76CB7C7855509C
D57489F0713B9FA252E42AB295A649A56980E6E07D3171B3BBFC7AEE02129D81
D05CD7E60023BC1378B39895CEE8AD481A17540A30AE3D73DEF38982BD76069D
DDB11B02B8FBEF1E2F6DC18179CF515E1AAF423690221D6AADE68C5908C923F3
4E42C05354A13BD0D3829A9C05CC49DC2519EC91026982512AD84206EC1ED85D
D0A6F34D79C33B58F04ABA445FF958E4CA098C9D022FF49744F3F1D7AEEF4789
F1350905881AD6417E215513F8A8224D03D0FCED23BDB5286981B17F89B29CD0
60CA97997D71E1B661EF0A5000F53914F1BC0A0801EE6BD0BB9994FCF9AD25C3
CF567A29B20D6829A175DAC0EA3CACA55993C39A488A00C554429F7278AD25C0
2BB99495F5D2937B0DC7194958DC3E2369571FD93A094C21A831AB83EAEDA618
C78F251DDB75889F4F4D2DA35D128BB8DEF6229771B71AF9B30F2286E606B61C
0E4AA0EA12349B1F8C1E8EDF16C7A60649ACBFFD0D18D139A687303EEDF2ED78
ADF7B9A1E820720EC46E2AB00BD37CC0A59C6F81FC1198E72229739AB12B075D
9D57B0C92B00C6CAC211A110C9127FFC284012C29526D87FE842BF9359CD3C20
CAED039640D7EA909A8FCE4E68B910241A683BDF778C9B9E07A0A9C651034334
16ADB07B4B25D78DCD1AF78D68C2341BFAFEC3EF8FC6B3485C45A60EF2A46B53
BE1C1A893B6D589691DE33FA4EB859DE879769F140712DCC5D82010873F7B00A
EA18FD6FBB1BF9C984C77713B559CA93B770A0FDF338B17A2155A0C03F229C35
435A186849BE2D21D6D4F5B3A38174526C402B3F08CEE5A7E23947747E7007A3
82AEDF8E3B035DD4D94B763340EC40F1094EF2C8A662A98CD3E5784B5DE16BD6
765F01E89CE0D1E7262740EECA5088DBFA53EBA294E409E73E461F73FD0B3F70
8824045B88C5088BF25082D6E3B9DF0D249CB4CE601A9C20876D5B5D068C5B92
15BEAF72F0410687A7BD86894DD29D6E2F3D0884A1C30139D3F7463934D90959
1F003B97183A504E209BC8E886E0EC685923CE51B25F1327278C2FCEE634EDEC
42FEF3038B305DE18F26148E484F70FEA9D89B449AFE540E68BD1F45B0D6D6B8
A0C7479D8F9E0DCEB7B183EDF89D009BCB69BD30E61206FFC636D8189ECDC449
65750EE4F766DB25B202231C0644D32B30E2413F7F145419586758604C61E57C
D3C45C2CECC2990813C91EFAC6235F916B803E22EB93346D1EAD4E7AF3C28A1E
918EB613389AD8FEC211C909591FE077A348A209B290B1888F66771ECE09DD9C
B98DBD49EA7A27B325A35792251DC876053EDF7B9189360FED33DD9AF53EBE93
0D8CC9EC66930E5533FF3A7328F0675312EF6ED43A66DD545E42A1186979609C
D62EF3C72F91FE53989E4E2761E78DCDA3D406E10B1EED1993D10B6ECE07217E
D1C0028330F91062E6F16F23E6B332EC69E9A4A7A08C193240F9BF650C1728C9
DEE961E2FD19D45E68805C40C11B4CFA319AF2DD09A6219059855CC2795A6726
F83143DC5F4D16AA60E56A25E37EF22863574D6D24B3D849701BE121A6E3C832
82EE5F799CCE70FCE10E565161A08DDBD4DD360D401719C5FDD40CB6C7D2D71D
BE1EB344E7ECCDDBF07B1F7DD3A71379CA020A09761BFC95F17B941D97BC1233
A0074E2B45B33DC50B36F50C0750B69AFDB7FF3A7F4E1A56A3CC07A5C1507FAA
54DBBEBDA6B8EF328EA7158271980162E779AA42439FD75C1D03151BFB763766
0EB28FD20AF1751A834EE51C749F4DA36D77815FF1742A4FA229565B320D3BB0
3F7361B1B55A1D1D30E8450AA97FCCBE1B39B3C0058B1DCEB68BED4375E60DB2
2A7957880FA4A3677FD069F443133F664C12C5BF83D414E23FD2ABC318F20080
70FF974A64F14AC69E764A8CF0524074AA8680389FE077F2E6D4384B110C844D
31E4BD2C9FDF17A3B087F068268660E21FF7F60DAB619AD88CF6736484E045A2
6989E420C2BED8B1C7EA0C98434FAE393859A98FC0B3EA3A0CAE03A44B056D3E
C28D85BB53EE04612C6A0D8E6BB90C96AE7758CD17F1D2D44E015B5FFC2A9FBB
35BD31722B422C59BD754B5913400556D1D072174ED600F872F72C090FB5220C
7A230473BF69CA8864418758A55DC54B2B25B0996CDF432ACD813432F1E2D615
4723CE48E9D13F356CF4F7CBE0ED417D76129574240794625C5F99FF8C88F157
6FB299C35E857CFF7B1244C10E0FB344B666D575447CEC9F275CA083FAC58002
CFC7C9922DADE3577BE70F3D4D71719C11875C3B54190E9D909671965AC8849B
3B885B7DAA70ADDCDF4DA875857710BE6066B5DA11059D0CA886C1F2ADF40132
045AAB661615810AF7ED7C6593BEDB64F65C63D5ECE4F24AB88D33935FBAE571
B21A230452D3C09C48A0F6B92AA3FBFBE9BB816B42EDF445E9984AD71187BE7A
C3BEB44B8B81D92F63481CCEFBF4264ED8900D17D967780B74AB761CBD85BF49
3182D4C28ABFB27CC922CDBEC586389E25759DEEC44F77F93B1FE3AF9CB0844D
53C5BF84F05453B5A327EFE9CBBBE8F937D3A3EC46F31CBCC12428DF4F175326
56E5BA0E5D02380DE074F149C2EEB29333DC2410B50AD8836B98F8CF2E712840
648BEC00E24FED93F31C6EF89627FF7636FDBE5529F0ED7FBE021AAF6E2000FC
F17756073A09ABFA792C31C37AC9C62DC745C7E42B793B74454BEB7210258816
9E618E6B2A23E7B425AD7280AED8771C6EE2F7E2D86C5661CDBEBB3548795873
0BA49A3260BA0E094D9116F8D9C646740F451574837B4DE08671D18D03697809
46B8015632C93E203BD3AADBC2C858944E1E4595DC7D666C9151F9C4EC7FB500
F32D7E4A77F4B9576213835A14938F0AC46128B217FFB8773574AF92355DE6F8
F66E8C07CC430D70EB815B198890C950FF790589F177F5528CB36333C946980B
89858450EAAA5D3FA6AA88AC5CAFA7A2B028395D9345A98973E2BCC93E5C2074
98B35C1CA40B9417A1DB1BC9CFD7A726E5853FD36B3E6675887A31F2E6F7B831
0230D14E2DA564BAA67C93C746AEB0F7B210A16F187998265FAABEC625523524
D79C1267C7920FE0D18A619F3B355B53B61EC328513410A4A1E520FB83F50F64
7650E90E3AB137912FB38808FCEC51E70B023AEC9EE2CFAD51440ED87D79F292
5B2E0F122C38A1C771667ABADA617FBEB186853D021AD09440A8C3F7D97DC5E9
481425A325592B13A5804480658D7072B9B8988D8AE6AFA67396872257064D8A
E3718B9A9FAAF727F2D8286177EE27BAD040C6658F2986E8BAD5B6494BEDC9B9
C7B6A0D6E6D116146E8A9B6F7DA3272F1E9E66AD9E7C3C43006BB681C3916B0E
7F4364FF36AEFA3541582667A7870701A5B3C378E9541ABA5A75104641BA7E32
CCDC0E99149A8F660F023AADD86B025FE51B8D9481AA5DD8D1A6BF5979B5224D
3BB7D31681D75354427E16368E1BF92106131505F5B7695B2F355214B7B880F6
19803771373ACF5A60C89EBDDDED2D74AE20D4B29604D021B8CB1F3E2F11327E
86BE3330CD1A5EEED203F62B05856D5DFD6F89B1CD10408AA78A9A1D1C8ACB7B
B7DDF90F0B10B975B4F34CAD11CA46A10BD728BF9EBD5F5FBCC7826927AB47F6
18484CF5E924A72A2E58CC80363CA0C93E3E820C3CBF690D25CB72A9C9DA4CA6
72B9E5918E4D5FA580F015E172C950A6A151B8B17BF1B4B3BDE21F9F2A4378B0
9DA1F2583DF2CA761D05F5EFC3FD87F99305B47848EFEE53C94C486965178024
5025A026A4271C6D709209D8E59E967BE8116678E52FF09FFB3EB382532F052D
C76EA7C60C6C76A2A7298EA1743E9F0119AB3ED796B8189A3FDD0ABAC7739FEE
087A73290BA23675809CE222127C93807B4DB795BFBCC80F98FA6D2949F04054
92217C9565DADB1DB23D11CD8FD421EB57BB81EE17C76DAA2C18C96B5192C466
5788388F26295B80031ACE408AFFACDE6D463A3C64BA2197A7E223145D2BDA9B
AB00EA6BDE4758FBC7BE6753067F93E74B0B855E5E6ADBD468DA54991A203E65
B379A15C2D6AE7BDF3D4ADFEA73B849C7262DC546D33C01D2B657C53F25773BE
D9CCEF17FC9D439500B37AAA496A1D611D5D428ADFD863322D0C8B98A157E5A4
B499E52B2682215C56F4C6D5F9A8BB59A813150F2203D71823F18BDE34536E13
84C1311D41803E5253808D085F08FE979ADF1EEAB209EE6DF21814007F1C72D7
803242B42C2A96108382D4DE5E0097873195F7F60F651BEB9081ED566F70E583
ED95B282809A910DBD91FA38F4442500718AB9B3A95E24EF577D7579C8E34E26
98AA2254972D8C9D1B3B08FE2AFAB5E9F03DCF2F2EA0C182A78BD0F67E74BF35
C9C4E1151D88FB3B93DA7996380563BF7AFF658146EA77558D9588E359BC1FED
8DF63A9B78C9763F852AF230C744B5ABDCDD46CF73C141C6B890697330834124
C233ABE21A47F7C76A19528B1E7F90F63CEE48E800BF5B4787D7C43A14EF28A7
075C86CD6A8D4C1B5FE3F2B644FA6896DE1044787FC6037A22B60BE1C1EB7B31
6717EE859DA259D52844F93EF5EB4AC2CE390D734F45AB844B4F0D12B9E3E69B
7C15C9181DFEBE07038CBF305D2C36831C2B723F47919871D278DCD15B4C783C
1AF5F89427BD84CD3142DDE1AF9E44444EE86E2658F7E9F13B8D50EF67B43506
4D3B3D59EE85FABBA694D786ED82F3207F566907F12964AB379595E64296FE83
5CDD4BA5958C133EEDEC312A10A63278D6FF6713EA292EC16ADE17C40DAE9334
122959D445E0BE4FB5D28BBB054D62D6FD6E0F97049BCE8DC3043A2BA57CEB79
30B508F859738B4FD73C195BDD22B310B27E09CBA0C7A79D2C8D5134BA31E475
7310675BB9728F1D503CF8A307E84EBFEB59700A7FB756952917572F05AC7778
9DD1811E8B1107BD99567313138DE7F43C3F5FAE4F9DC7E474EB125A8597C9D8
C6F599D3C65113AE448117CB202849141A1F8FC2310F0814821C392A55174D47
F5073D3E54E1E6A25EFE9FF1743C357AA945AF33B63FACF9469C8EF592F300C4
65A08CB25162C34470C82B24631B241532649A83F97B4D256025E658395EEAC7
F14084CF7FA44044CF1E14A08E445852DC901152C28472BB7329EDFC06F78DFF
66E064BF3F8F5671B2506B2CF24693B18C9F4DA9A0BF1B77A7C63D127A1BE907
72ADBE89EB223A20B39766C59F20096A4D41D34BB276C5EABABF518FFBFE4423
72B08A3178D6BF6C8DF8EFB55E6A0F2BF120F0E71FD0EA94F3EB3F70B669768C
C7ABA3608F6DE3678BAEC70D06BC3F03D984ECD55D77C5CE9D8646F8540B7505
7C44BBCC009BA9C730E59AF508227A8D7945631E894F1688FDE0EE12B69D2BA0
C14323C9917A206C692FEB2591B9D16D9E8F76E90A33A1A27029C1DC862E5386
13B0B13B7CEFB7D301F2BE098AD710200CB5EF45B36F469AF4126732A216AF69
29BB03EEDEC202361FC6AF0E4C994BB8FEC9A82E30AAA7021D9420E4E8AE95C6
1897B7EA35E99A0B97BBD88287C40027D89A07A5B94E8069BC3C6C2FB9E21E43
37D5F89996AA718C045FE55449C9A85CBCE97B9D88B510C65DDEB6F65B289C20
B394CFAEAC52289E92DB243E90182AC77638D5BF39F2A2F5795A37E92912D23A
EB3E8CA573D60DC55D7A178AE9E9428DC8C89257FDD43F4F3484C3B11727B838
9E47673FB23656E373484CD1C054C74505DAE1978DCBE919FBB2BB839AA28609
8EA0AE06DAE2E1F2AF63275470FBC224B198253D60091876F65EDBB815352E5B
880282D5606581EDADDCE40AB725A7E9D53E24C215002AF57471FB015094E989
A16BD0065A35CDF11927AE2100A5E167D681E0F0BDC7954138ED0E682457140A
DB9EB2E33F3C54656C3961475B0A5E5BAF1656DE0175468B05A94DDB3C7F22AD
26E08E6F9F8164ECD762E7B024F856ADC938E009436F25B0D5073531064EE2D1
C3897ED13FE4BE8307AA2D827C6B8E6B2AEC3E55C4E89759884926F8F38A3BBF
C7F658AE7B5A7F68F73855A447EF8B6D8829BE27059234FEB89F22A822D981ED
7F30E5DCC13E2D28E275D9F9A15D6AC84B7F9435DD1DAF9426EBC0241EFD76C2
0DC0586279A28173D35DFBD450B915D2C6CD5DA663F5955E9A04470D4B87C533
BC2AD8244C9BEB865CE805B04F608997EACF35E3621530F2A2D679A4E0B11D12
A4F0DC4B7EF5BFDE9E68845411C21ECEBFBC47B608F31ADE02D57F1B4104C6C3
7CAD02818452751185E4045D34986713CCAD2BBA25599B8F5A2BE3E348CC9539
CF4240B7378DF7185FAD9889A55EA9FA2181746A2B9B80EEA9E2EA0EBF5A2B9B
07C46A5D08E8284B4028EFAEFA0A456CFBB5C462D7AAE83F1272431D17530BCB
655D7C70D3D8FC8A560D455A42484A3869FCBBD7D8BD643DEAFB62D34167DEAE
CB0D692CB023F9123C01A9A2241619C4B2F0AB9D1AAC9DE9F8EB597389F0DD93
08F1F89B490324B62DCD5BDDF48851E1F99671BDD949398900BF75D76943915E
2EA0B44CE2B87B1A274E62E3FBDA8CE994AB09D6B4009C54F41748C359E0F661
B76F8D4F293ADC09421B88A85F651BB453948CB8E2F7C2AC6C6C5D73E2D3C814
DA30B3939E50298BE721C0B8B658273BDCA0F705DDA17DD26164E0552AD62570
1DC5322C8DBBC12087570F4C1D3BB9D545C47EC574A47CC6E431445FD9A6A12F
DBA8B8EF198487163E6F558DC9B81BF660D3DDCD26F8636623420F02449A52B2
219EB40945217C52345BAA77153EE21EF046140A6DDD14A86BCFB5F8E25333E2
63AAA70087314E037031862A4012B320808871722DFF4792A674BE6EE91306F9
8799495DBB3AC4DDAE1512B71CB5867ED90B2BFCFA5921B0CAC484904AA73716
9B00CF46F3566810BC8469A9D2F12374DE44291342EAD31018EA72A6897F5696
C1B5625356A69121635F23234EBEE757042571C28E1EF04CA530C25B6C0A7DEA
26EBF1428E3FCBBE04255A88CEE5E7E866F6078D226A902053ED2E01FF4C3FF4
521B7596240E62798FC6A879F2B81389BFD02C15844435BCD684D8D1FA6F99F5
3AEDC695A129D2DDBC14821612655B23F4F0744E683F88050A9C5C5E7C381A90
5EBC4DA4F6D9A1EE4EF92AE15EBFA4DFAD97250B5CD1FB88F3FF70B23D7F547E
3A192606CAC92DA29BB5100B07E87B3E591C4C4639E3FC40BC63EF33E2A32965
D7471AD16F9AEA0752F269A08046E462B370EE595F2C2D8D6AFA6F92404598E1
C2728AEA4FFDB38CA02D3F7A29A464E081809C087D93A5F70B4CCD17B60669FC
045AD8F9D6251E67028DA13D8774216CBAB096E880DB53B355C134D3ACB2A09F
04E3AE16CA88551F0A947BEE3B2BD761C0A535ECBE5CC527C150F3C8E1615B38
053AC91ACE1433D7FCBB7299BFDA698F059D835F0EAA7241F8215E8ED4A28909
D93DEE6EE571A88E872DDEC5A9A436A2050EC77F995219E98FF026CC5123B8D1
2D5CECDC6F6B4A9BDF8CB3CE9B875DB5C2B5169B7D8FA05BF25EB6F24F957464
912FB616C949CFE5C53577F628A81643AEC8C483FF15936D21DA8F20E4715918
2AAD42677A846BE2E78ACDAE20CF8F203C241110D3D4C7DEF9D9FA360307199A
BA1D91CDCB751B7FF4CE2404CD09312C3A8EEC7DEFAFFCAE6D0E2DB7A9939B29
0AB3F1B289693581D3049FEDBBE8DBCFB1B95924B8C55D87106D88C85F6B9C82
17878BDF32F81E12D85252AF4B346C297D9F92A9AC993A4BC1E77420E7ABFA08
9307507C51AFFB4FA7D573691DDBEB1784CD479916CD6CCC91D02D545A37CA6A
D908673E1F876B39EC3248EE1557A250C19D74B2589B680E0E24D310FD4D710D
3DCD989022884F2F00FEC73A79FBBC25646381220BE58D17DA6739645E3AEC9D
F7EA4FB8FE90C3212C8C1F67FF6AA5A561B83E0A6A1FB72B477B84E8E036205B
149D0B5329BA62CC6A078C715AA5A4B3BF1964EDA5B9CA33084780C6226FF2C8
ADECB846C0519F47176F95FC7C4D660BEC35A7FA87A299486DD4C8D086233A81
586C40B6DEAAC32256246E55ECFBB9D1B55C38E250927CE5A9E7F35CF4867251
D22BDB310BAC4B0D6B8CC273BFD74122AC054F593BAA0F3F16F94BC18DC91184
E03CE2CF6E169D297BD979A695857EA8F1825C1E6BE5C60CFBAF472D6D36497F
365D4F180ECC08F91CDC985741AABE989AE13452C0200E08DFD47AB35F3DB558
87E3C7D5FDCD6FAAE966053A971B7AFACD31CA1A6570B3493F9E6538E1FCADA6
7C82BAEF91B043502214E9EFD49049FF55DE51C318606BC1AFFAA305E475B0F4
BEB4D7888BD32623558C3D12C75C3789724A76B4BAE559A1B17F55C5AA0E2153
57F7DCDA9ED51C9FA8278A11DAB9E2B41E285539E4D7F00EFB4A1952562DA525
552C3A243BDEE10D861CC46761CC724DC71000B30D2C5ACD6D9418384386648F
2E9DC182573111A7150B1B60E1CD17BCC1888018517C9EBCAF6267D3931B92E1
A9316416B3D1012DD31C5A4B6DF4AA60C64D033462B1ACD1CA38FB71CC15F1A7
F0B509DED1DD71B79D30EDCEA2C5843C5E5A2EDE48D4721D512BCA8E8EF55408
FA9C528DEFBFFB83DB464DF82898BF229F1C32DCE2CE9F2E87B5AC66C6A23572
91E58B0B6285D63D008ACA64DD428CA374CC57F36864CC66602ACA6C2C54BEE0
5571ED7818E800F0730BC7E7851288FC0A4EB638792FA9DF80943BBAA77AFE15
E77FB480F242162E20EE29C56F33592CAA5D678DB73A6705508E8B3CADB4C8AD
D80ABDD30B1EECE3CD1A589B239E4B4E49F9D9F860ED6AFAD4ED2AE7CA2771AF
696FA0452A40D81AA238078673C179251D69BD47C613664CF0BEE84A47E06C98
7FA41C73A36C7EA5546A710DFAB8AC31DFDE05548F82897948B0560B6750AE68
4DCCDBB32589F2B887BE78E7BDE8EFCC2FA0AF23AED931ED5DF395F059DBA05C
C0465F6D7173DC33621D9E15077E4D8F0D1B3F9A60D88D5E3FE0DC73142552E9
20A0FA5A18321056A3CBC2C2A7AA5A849C8825208D5E74BE8ED4995F3ECB1902
606EF5D636F5A97E93A7C0BF07B993E95AD9FE008744DBFD59B2D00309776665
8322C8E138C45E55B143C93BDA3820FD4948D6808774DC963C8656E16906813F
2DC068C73AD0B66B2FDCF75374564C1BA4E920473439A09ED1A8EC74D17660CF
5C045B50238A6AF6A8E02639298D62BDC73E5A5B4CC4434CC57A73C47B1F9E25
7975BF129AA05240D18B107BEC0AB4E4249151EB8AF1326E7DB08DB82618BCE9
113AD3807062358706D7F9FDF1B46486859037556D0DCADA55B20B59005E862E
C1CAED5462EDE5D9381D0FD75CA2152AAB1B8B5D41CC8FA3D28B7FDB26AAACEA
8743DFFDF186463DB4920DFDCB8498F1FCF34B3E7C648421127D82F38DF810FD
BA91C27A05AC4B8A6D645D11F67329374368A84E97179C9B75C0E790270CA4D3
12F0DEDDB598175D1A0B662CFF7886465A897A905583A26485111AD34A1EA2B8
487DCCC2332D7C396EC538AAB3299E39F3F053814C0425422114A21274D961BA
41281517B0F85A240F1ADD3EFD9EAAE7AACC8E6649F36E3CFF02F8A8DFFA1ED3
35885FC3BC860EE89C88E83B144BE8D6A7F73FBD343AF882D33E5A43EF20DED0
D721005B2B1DCCE3B90366A828C8A79824F6A5334CAC7D4358453288ED50B167
955FE43689E922DD5CEFA8E8B22295AB9F4BC377DFEFC42399083F63F7B1BE5B
9FD0D277D553C6E815F229537CB33B2E7ADE907987F8B22FAA1BBE2D3B2CF649
DBE11D1574A905687175FEA619E74E9C1B1862FD0D6326647DE55C8D674871F7
F1C6C886E2B47E30DCC022B26EEA2DCA1498AD2533A40F713FE1E18CC52470A1
9620ABD7C35B73294535AF4B0A72C3A0C082484F97F575333BF7D66BF1D93236
4690A852631DCE634C1964A7FC8669BA597B21027E7318759BB2672F4CB94362
023D69828D22FA292C5339C3F28BF4BD1FEB8644F6648A86EDC1DA10EF706671
B48ECCD5EA221A5EA35EFE9FF1743C357AA7708B1EDA461858651696A07AD5A2
6A3E0ECE440D4D329F13FEC5F37BE5511C04ADF5EEA8E775FF6702A9A0194F0D
A8D335AA15AAD27AC29D43370F0E9C3336A92F50B3EF7D7120A26CBCD23124BC
0E4C0D517527F90F7B4828EEF060429B54792D6897B0A8BE5D7BDD257FD60F48
BC1B0C48B1C61706AA9BE7CE96DD0B6628E63C6605C2647D0726CC7D9CD4CC18
797168B45641AC41E772B4DE9F1F3896227A7096A2A2712C9C65DD5822B8B649
79FE1A1A4275E54BB6B60F7B16785BFB060EC25D46C0D8028A6F10B0E0F33833
B020AB41FBAD16915ECBAD144FFB5B8DBE2B8EB9F9B39573024F69B4B2CBFD79
3967CB89B447195A4DE38F56F7C553C90D311B3F9F16E11BA081CB56870EA2BE
9D0BE187C85E93FFC77C99CD8F33AB34F782447091397A50DD50D644696D985A
66235249ECD2D4ECC87A9C8DEF6D1A99403383F7A938F8F2F9B439560896AD8D
1293F860D5853F5ED8DE5C1F21E8242CEFB5039E549F90C8A93C1E29FC2376AD
B1BB202048921AD4517A98A38ADE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-ReguItal
%!PS-AdobeFont-1.0: NimbusSanL-ReguItal 1.05a
%%Title: NimbusSanL-ReguItal
%%CreationDate: Thu Mar 20 10:08:40 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-ReguItal
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-ReguItal known{/NimbusSanL-ReguItal findfont dup/UniqueID known{dup
/UniqueID get 5020908 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-ReguItal def
/FontBBox [-178 -284 1108 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular Italic) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CCFB357288DEF82BE
422B9914B075E7EC18835881AB22C2A47DAAA4EEC0A8DDA1CDB5292531E5261E
D8FBC087C00D12D9BDC0051529207238FFF92500581849C386F8427D44353C41
FA42972E325397AFA55CA5189B1EF4979F06711E406A219DCC46C88FC82473B8
567E47B75364FBEE1A883FC42C9CD2E1EB581D4D0C25F509BF595314EA222031
BA9606F17E3E4931D50AC6AC2B63711B0E85A6CBE6FFD9275461474D673694DA
B38706890D6422CBB2B499C0C89A7AF218BD84FE0B13D689EB5930AD0DAB5C0B
55F68356C285EDD85B3C0AFE1B9001572AEC0C3692958F7F3E16DB0C2D0647BA
C1A4EA2EAE112F680B33AD9D59962FBD63BED5766186A1C4C21F500B374218E5
7CEBA25638D9F0520E789B2F39CB0567D6BD72C076BC76095B60ED5E82F33E9E
D2448B364626AB558A979368B0F1495D8C504EA8B6E291E781F5DD708FE9B5D9
9CC26079902BF1EA845CC6ECC973DACF88D956769DBABCCC1F7C44B3B1111732
3CFE60583458E93FB796A440E43018C4CFE846F1C79CCA0416E6B446ACCD1D05
A4A682928674FB388BB109497BEE1F0AD9EB289AD984DF057E8A27F23601CC25
EBA38ED89F18CE03BE3645F75ABB0BA2D6CA8746A0F96518E865AD53CD4F428F
601B06E05B6B3F27C3A62CCE52668854DB4DDED614791C32F31A1595BC2D3E16
772C0ECFFBD06A07A1221AEAFB8CC91029C159B121F677C9AAFDE187994135D2
741BDCF6B4442E6728BD38194DC406A9F88D3A94E458275AF47E670A57FFD531
F72836EE4932C0312FAA0C1CE257FBF790B4B211B413770AE9E73A46BA6E12F4
A58A5CA4121CD6A7A7214DDA473850650623BAE8D7BC6F4034C6B648F329EADA
DB8049C762F7D3B273FE1AD47F072E6A69282866FE0F37107E9DAA8FD7EEF483
7B825A0E000E57B711220A699F38EEE6BD832C6ADD8CABCF7A9A5EDBA83116C9
D9139619E407AF339C1A479065EA6FD7A58A466C6230CB5A8F8583955E0AB271
536098804287DA09D1CBECBC283B2810D28A1EDBFB2158886231E454146E77EE
C99A662DC9E225C24C3E8F1F79CC9DA24C19532BCAE414F63152202C54551485
EA43B64620AA53E3F13BE05939C2A6F9E150CFF49B3ED6A0FDA63D6362581AF5
E58BBB72495C099979D44BB1AA7F38437E12DBECBA9C16B816225009664E3D89
A1AB5E0FD14BC06ADF01C89F3BD84F79BFB78621D2B1C4A752A377FFCD5D5E29
BC792F50676DC70568334E34AF8970169E976E2488EBD830CCB0A350C695E3AB
C1069A9A887309E014F82B805C37AECF05FD413220403E4EEDB25C9DD97F93C4
9FAD4CE822EB97AAF4E70942EC5E5FE4C6E3956DFB2E008F22E3792513C2AECB
2746C788F104490DC1B3A97937AFE44F3CAC5970BF57C7E351F9925FB96349F8
D9786D8E6FF03E9C4EF933A419E891E8C5AD303FF87050363CCD7CBBEFE38E2C
BFC7B1525EC6AA4CC82EFC3050975CA531A5D3F6B4B911C17FB2929D3E12A896
7364952081AC22A0C6DC4F14DEA17736D0535B8B84820471CAA34AD333651F75
F9A9415D03C8D92BA72C28C2C148FF48843F8D8D4C46C3BB844048F77805546E
B5A300E041D441A9A7BEAFA4514F13F8193B0E25A2589E5DF9D6FAD8C378AC3A
DF0223DA6C547263340213128BC9D5A34F078CB65E040980BB5098946A6A5FAD
931AADA4A4CAC514805AA562591C3969760019C54EDE008DB2C2F9582F512686
F02CCC66343D83CA952DF1C68576FB470994C94D9627E275FC30DD9DFF1BFE19
21F975BFF1B499DFA54C7F37D97D22AFA04E1FB8508297F56037E25E2D9F9653
263577419F75DFF39EB3A8B07A4444A747E99854961ACD8A387FD8136A7F2E36
9B76C4D4B4C5B50F5E9F81B30C665AF3BA16E2CF36089AB9C8852FC7AF1DA794
D7CBBBA8A8C4E0319124900FAAD03ECC8A4BED3FDA6645CCC40D322F471CD166
272472860C10AFE6B352A04D61FEE45C63A52DD73BFE5701CAC69536C73C4F7C
6C1C8CA76D9487703A9A1DE33046F4F0966C7A8AFFC1C03A3E9578E495852F2F
F71CD16FA0305A4110F3E6B825F74F9FD31EF9FDD71DA2BB9DF33E5237C9A453
019DF489FBF8904C04D18D78DB2A41971F8A70AB5A4B78BD85E153DF6CD1C03F
7CAFFCA0B5A87D0F008D17788759F83765968C6B85BC89EA2C8E331E185FF992
CDF09E19455276ED399487AD171C404E987AE72403AA9BCCDAD31EAF7582590C
7498E5BD5796A776AB2CBBB8EBCC61EE51132CE986BE9EE59EB97CF9A80DC691
FB81688BA09F51112A8F2AA004BA3954B288CD9232F88633A933830B424CD71E
5344F2DCAE69E08F1BFE2F05C317E60CD87639E1B0B9A5D4BB9C7456FBF0BD75
7E71985920DE10176497041C6BF0D15CEBFD453284869BED4F94E7513BFDC9F0
ACBCF6E45B59E95CAA975F9D6597FD4A96D627F7C1E2D97BD87B20D735CE102C
0F60A9D44BFDBF6B492E07E4DB88EC03A7608CE77EF1E843C3B7E6591F7CF09A
046115D45493F7A67587727B64D2D562A024C8217E924000A0F81F7D46720081
C49801814EC1BE7BD4241CB4AF9E7DBE74C7DAB52EF2E3DC5AC97E6E82010D41
EAA72453A9A837DF504B8E632DC6EE0FBA5B28BB2F8DB988718EC96C18A35AF6
22DEE2EA42E3B7BD3D214CCDD051A9D329EFC9F1AC3A3F36A615923C1A198A77
4963CE479778637620F657448245E5916BAFFC66B3AF3FB42461B51020869CA0
ED8A459DE74CBB09FA6036866214219C26271367524BDD74E3B51F007C1170EC
BF56F9347242916ED40DF51784DAC5A3E13A1BE0E78889DA7BF889D57BEDB712
84DF983AB8EF42735F3FE7856EDB97081C686F7DB37F07FC1404A29725420915
C31A6C3ED91DE989E59CDF6EE3ED390E27940C35B42845DA0746DB2EA7BEAA96
4D319E5DF3F8DABC1C422B458B6978B830B2870FA9B1DBF258BFD57C0B09EAE8
8E06481A75518280A2611EE107C531E18714D1921AA2AD1C38E5AC1A345DF801
5F1C5201E8D4D9A36E890F86397E685A0CE2D291B6C13970217BDC956EB1B9CF
75CAC93915AF344CA0E319ECA6DC9548A476EF73980456D3B70484E80CEBA2E9
3FF16BB38498F935A91C42B24EABAD022CA7CC1E1A9DD00D5704CCF674020EE0
F50A75A0D5934141AFF56B3682F97610B89FB5CE3C2E292CA9E615FFCD56322E
7F42E3EE6955F4276753DB671E3E03F251E8A9326A3A838BA8CF5C679C35EA72
1733354FB7494DDA4F57E22C6DB9B68CF765629C8E9763AE9099A8200469116F
468AEC3FA7FC3FC38C0016DA68158F95793A908C6849AD1E32E98DF2881A0A48
64529047B8CE56779C72C2FBD45162FCF087AE6C72EF3A16771A53262FEE1887
0EBBFC3CF94C121AB856C2668EFE5A8D1C22C4D20297A5DFA7BC3B0641B2A90E
9DDBE79532A856DCDEF8B2DD2A74F9FDC92165664A269F23CC5116E71E78177B
4203E448A534E4C017A565727DFBCC283ADE37E15529D39BE0AE00BD8AA736F1
D9A8C0DDA0B31A471371A9550596A73C27BF5C31E6181EF7360EA0C5E452279B
79184581BB8C438A771692F2D0A0A1B88A3907E5077B2BB805A7A94F823A176D
83FE34E184CDE962907B8922D49E54A2CEE30CCEFD855CF9DC9E97AA462C4656
DEE472B320463E12CCC683D2F0776F0B2601B46DF78152E829E8C3C60C9F5CD7
08EA28F54BC4D33398E908E1930DF44528FE4B51BC4E49B48A30A2B81DC73CAA
2D8B3C612668E851BCDF5525EAE6CDDBA5BB873AFFD43D662190643AD9AE12D1
280AD7446B7B96FFD40BF468F1E89C18388E03444BDFAC5A1B5A33F324613382
F924F24BFC573C2C5ABA12CA629DBF367BD4ADF0F607E9B6F7F344D7E9DE300A
DADCF19A16401DB893AC2C4A9385DD3785282480E189A6EDD214621FF85DA4FF
B0E778C1E78BBB3E4160B86686785231B65B02F5DA0E72DACDA064D5A209DE56
9069D47255A162EAE405FAB27111B979F035FEEF6CD75DA753E19A330B81B752
CAE4B533FAE0836C04D0F50DDCCE175698CFD37EC47D27CCC70277EDE6152877
46F0FE9921BE530F98CE434D51219627A9746779068C8CA8FCC7CA72D369644E
D11F682658F9B6805A6CAED257D6DB4E5B66EBCC77E6E4D4F0EE40C70BEE82FE
7348F1D4CCCC119C58F76573769C2A37AE37A0FFF750E036293C728207BE4492
8DC0414052BBD6CE17356EF6B9FD9E66F173A0BFF4251C20EDAC1171662D1CF3
03FE5BF1C12D83FC2FE7E64902379FA9A38368F6411E66F9B200B51A2E1FB274
98D2466CDD1B12CF497F34C854EAA6B5FB9CF9CF0AEC71C9DCC9F80A63BED45F
BC53EE292915FBEC0BCB7C1235EA5778BA2342674772CF7597EAC41677FA890D
3CE1F0E896101FE4D551D6B4D0A0537F42D1626E224FDABC76EE62B855FFBF80
6188CA2B724FD384BD4ABD8F51DAFC3577050A530CC84783BA3FD301B5FFC7F9
A10F99FD9DDE7938724522884DCF04240DFE6138F8FE215D42A5654ABC6EF0F2
02120E35274CCAFCAEEFC89F3C9D4ED85C3E8A1DA631442D5DC82A8B7B1DF998
D5408E5ED1FB1F714C9A0EB99E20CB16242F01B7EBBC0780FC2C4F5551438E31
F9C15232C8A6A0FF775577F439A8D329C390526A5F4D70A7896FBB26AB123870
019341232ABF224B1AD5EBC3402530DF12F8E0B3AC8C7B985C8F975E642A5BB0
D88AB96DA7A5CC62CE8C34C63ACF886C4C46587CFAC1BC3306923527088B40ED
3286EBE944B1E10A427268550830E35838986E502B6CB842F97C8EE481FF40B9
727DE68C0F1D3F0FB99B8BAB322DAA7FD7AD0700708D4CFFE562FE29155E2B3D
467B00CDFF70B11024F9764B3530F20344AC34D4C0EBFA0DC185D4426E5F6818
7BBE30F6E65AD3DB0470B1B6B292BFA9EBA7FB06313B007E6C24221F56C872B9
1F545D2A28C82A4941639ED6478779AFCB3E5F8D84AFBCF964BF2532C43B6272
67F3E0575F9FD40F332BF2576A196AB572B1C5DEBC8EEE1A97D50D92C21700CF
EB2E5F7EB7B5D69008BA718FA6E294718015B61724569BAF8D8B05DCB6FDB630
20BF96F632A2440B2C5F20D7555C0B7A3D9863ED1E1E22D2402210B1498D61A3
68BF6EA97FA47BB9546BDAFDD7E7976BB44D6528F789392D6BB5754E6A1DEF7F
099876AFED75D83C753062BD524C0FFBF01CF1140B0AB289652CE8868CEE9681
49D132E1AA4DD979BD0CBFF75E85FF59DC520049C3418FA98048A97B9621944F
2A489E85076BF8AE59AED78D8915123AB19F7E13C18AAC28B3E8B6AC66BF28C2
1D7CF00EC71225D9DDC1FFEFF8AC00D993931E69F024CEAEA17676AC460D0AB4
EB7457DCD6CFCD1BCE8F29DA94F37F0D278D6B6A694E943A3B04AD492C021ACE
CB5E5BC0416EA7B04555B4E5B4E36638B9DB6F7C2BD8213BDE78E8BC1D2B240F
2B922078D53D9D27BF8540DF2CC9A89B9A1316EF98D0CCF92D3A43BDBE3B3BCD
8AD4FF4A3179854D7BEF99BB2EBBBE934D4447544D4C0A9EA4BE7EE8E69467A5
A548F12F067D1C5C78C4FC0B3B31180C164BD029A66B5965A8F231A45F6320A2
89F33810E557792051748CF0123EA8C8DE6BEF2A47D728556B48262F99E6411C
1EF070BBCC4D751B8B853B5B58EE08818580CD516845797C34727C939B22E4AB
1F1DABF12929BF2759DF30670E6A5B76E369D59DB8CB92D77E6702300CC1C61E
8FB6843F1D88045E64E910721D72C930B7529A369E2D6126F57EC98EDB82BA97
242087B5E23262C7A23FB33D4394D529F70D82C14280F4986B3158142A98C670
8A8D7AFB1A7F571EBBC5478E2E16BBF48F51ED0062D13F9F94BF4E14A8D1B057
AF2FD1AE4F911D8951E3D35C6DFF11F2A81164C4FDC6D4E571698E53509BA95A
07D352F4073292C83C7C588641B3B58E13C5C136997FC41F324CBE28F2061FC5
8349302C8908E04A92B3AB3FBDE10F461619455D801C682E7E3B7865117D1BEF
04FAC627893079BCF9CEFB0ABE8D7438776E3879580F4DD3294D11D817510ED3
C5E16D45B33F993359C85456C4EE5F9B82039EF2C792FE46B5CD2A9F608BE986
1436BDC17E57B4DABE1B6A43BF7E94D3AB4621115E5BA03924F6455E5D6EFFCE
A9BF2FEF55BF82B254A765770710EFC50A4EB71388D9D3FF1653F1D0E1F33DF7
69B3946D6C4B23998E8BBF744E9C32F6FE5DD1473F7347EF7091D3709FAEE39B
B19126B4AC0AA88A80D9F55757AEF0D9A3994FD5ED6033BE65476E5D26CAA376
2A99FC90D3EEFC99AC9C8F2278ADBC9CD72F1AE0BE496F916E8FBD26688E9C94
165C3D77320BB9990C74682BFC6D36F090313D79DD67E3D54673C25CC4E23146
552DB884F415A8ABE43DB6C8AE0B7073D01D8975CCF00F9B4D67CAB2D5C3AE86
FC56E754251AACC366A4CB922B1F3E7511E26A0D412C61559606A9CDFB0B4B4F
89363F9E2D4D29ECF7C8B95C1D4E2004ADE5D7698716C6A16112AF2E4492CFE2
9B7C146C62CBEA70F19F575050A4D18DE5F9D25687A76D001686C095533C24C7
AD7D31B5BCCA317755F543C7BAA2CE11C6B5D4236868D2496F159542D397750D
EF4086F32BB8261B0E4C52F8FF337AA7FD3971580E5D1B5F3888C7249010EB08
98A811A45AAE1DF85B6D50840B56746650DCF1E295443C6037B181BC5DC2215D
30232FFB6BC832FF8E31DC95E59C090F1B7B255A48DE5D3BE649B6E8929B41D0
5DB5E644A12C816F87BA279D7D3D712579D8281BF53D6FB3DFEDDE0EA077E876
23F2309E352FED420444B069DF6ABA900FAF6B1B89A4A78E7E36547EA3F399D3
A3B5527BC95897F11CD6DC6C6762A494937A7995C424D398C581CF24BD89B65A
6743F9EF7A0238DDF9B6E37C801E96FCA39BA3656D27F7F0522B74F81740B6AD
53100403904BDE3A507655270BD40C3598F80ED3A05F033E88B74BDEE92CB40C
499C79DDFD5D2A28ACB6C8ED09D2A46AF14E76744CE2E7A84F5F9DD841971A88
7F60FFEF78F289EBFA21EF08DA95835BBD4D768E69889ADD503870D3B0A605A1
171D1F1D6F483FA62874C8FE0619A558C8C0968BAEA4EEAE5A4CDEA855D3E7C2
FA625DE1DC0ACB9CE7B9CFC739328B7222F492D69AC4847080F3013DDD868CF0
6CD7A123E505A14C9C78563BA0B0B63944163348D8121D66851FC92E59987C87
440179A03807827D7986067B74E0389542AA777F2C3FD95AC144E3FDE541F4B5
DE4024A4A1C44E7017822603FB6FCA45D3F6EB830642484016CA9CFEA6049C09
2CB698DD6484D8D3C36B817BE3097E098DDCBB72438BED8088021743CEE9DBD1
20CF0F75B5C56371B384D40B3619CCC2A086D9DB3F105A936E876857CE88BF2F
0C0D5B09D27456B2A754C3D1BA0CBEC6889974ED3C027555BDBEEC677736AC06
ABE19DAD67C5FE99120F8C3F9020897A7DAF370C80ECCC46F318BDF5877D83D2
19AD3E602B9163130C2E7D439F91AF19A0C2A0CFAB7A16BE8DA645E14C973472
4077E09646935383DBDF8ADE8BF22A7797DD7DED8355A3ECAB70D6D81EC50B1B
6518A9578479A2FEF8D816EC5F9734BDC421098DC479D05C2A6C1A3660559A26
18D87BFC0076087EA45A2C9760A161E02336FA4232ECF309A801D969ADFC655F
C5EEF486A5C7E9231693F9D994A258F2C011EFB3CE8A138C4AFF357B14C63BF7
CA85B6743E3934D597D643E13B922ED22965F5A22DE2E7B32D931D97903ED804
88A78F8DBBCD58D0A7590D62F23ECE19E0A4B5A804CD8096D94085C3B7B3F3E4
BB1661323FEE2DA376423AAF1D493049CC806B4C120302D361EFC20E288832B9
FB87252377BBC03BE248EDBD27C06134A2A69E7F5A86FC10C2F9398096E3F4C8
E040398A221A29A8B8B175719D13B5E118CA3A4BAACD1F4FF803C5327AE74F08
ECFCAB9A1B898B8E4230673CC38A7F38F44F08DAEF45CD2CD1854CFAFBBF5AF2
EE9C18D152F1F9561E8372E03615377255247B14BEDFCC602CAD9D00D25832C9
4F9B2447F8647AA0ECF20BBE3EB4571F2AFFF32E2F12CE310D809564699D2939
071C33E49AA6C6C4AEB16FE9E1C8E24367ABDF3C9E374743F56477E068B0F5B5
B651754658AB8F0A98DF6072DC876630F49F29A36447BE96E690EA95A7DC4047
9D27E0F049E1CB8E372337C6484AB9CE26CBF200EF048D5450396726780703DC
C1AD160D1927E562732A26EB99F5C24032D0DC6A718912EDE02F085B8B73395C
5FD1C073D2E2E03CD2ECF4F4CFE88E973B87CBACEDAAD863A2D5F6AD05C9657D
A567FA21B48B986CA7CEBBD58C4E0BFA220AD8EF99B93CE241F9F34C0607B9EA
5C05F0E469AA0E9F24FA9BC56BE5CDAFC1F2C8A814592BE5ECACFE16F96958D0
D729C90A05A993FF7E1FE477BC3AA638EBDF55BC30BAFD65C6BCD7A8AA0C83CA
4FD15126660A033C491FCBC1CDCC372FF12DE4EEE3DBCEB17A30713943D77A2F
AAA3B2D1E9F9DF9E912EE41D1EF026CE85BB48A5595171E1DF213CBB73424C76
AA043E108C07A220D0705F77F94C4CF42E62928E5895C1976B078CC3BBF7EA81
04037A912D56E6F6BE1CAAA5D1A2DACD3FCB6DB8194136B87F89F1C9A79B6667
3F8A9A90E7080788678B12BDA05151155B939CA6E19B1D428AD94FC9EEA72DA5
FFC340F95FC47324A40D47763B5D633B98C87AA2A4FFF4C0040E4D60F461AB56
FBDAFD3B089059CD3BEBCB62DAC04396450986885F78524061CD4295BF8ABBC0
31CA5469C47F887A0137EBDB76926E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (main.dvi)
@start /Fa 190[44 65[{ TeXBase1Encoding ReEncodeFont }1
66.4176 /NimbusSanL-Regu rf /Fb 137[55 61 33 55 39 1[61
61 61 89 28 1[28 28 3[55 1[55 61 55 13[66 72 2[78 1[83
3[28 21[55 55 55 2[28 7[72 38[{ TeXBase1Encoding ReEncodeFont }26
99.6264 /NimbusSanL-Bold rf /Fc 3[42 23[42 7[54 69[42
27[37 37 37 54 37 42 21 37 25 42 42 42 42 62 17 37 1[17
42 42 21 42 42 37 42 42 9[71 50 54 46 50 2[50 2[62 42
50 37 1[54 58 46 50 54 54 50 50 7[42 42 42 42 42 42 42
42 42 42 21 21 25 21 2[25 25 36[37 37 2[{
 TeXBase1Encoding ReEncodeFont }65 74.7198 /NimbusSanL-Regu
rf /Fd 138[51 2[32 5[23 2[23 1[51 1[46 2[51 46 12[51
13[51 18[46 46 46 2[23 46[{ TeXBase1Encoding ReEncodeFont }14
83.022 /NimbusSanL-Bold rf /Fe 133[45 45 45 1[45 51 25
45 30 1[51 51 51 76 20 1[20 20 51 51 25 51 51 45 51 51
12[56 61 2[61 1[66 76 2[45 25 2[56 61 66 66 1[61 6[25
12[30 5[20 36[45 2[{ TeXBase1Encoding ReEncodeFont }39
90.9091 /NimbusSanL-ReguItal rf /Ff 9[56 124[51 1[71
2[30 51 35 1[56 56 1[81 25 3[56 56 1[51 56 51 1[51 12[56
61 7[66 11[56 4[30 24[30 33[{ TeXBase1Encoding ReEncodeFont }22
90.9091 /NimbusSanL-Bold rf /Fg 3[51 5[51 13[51 3[51
2[51 74[51 32 30 30 14[30 9[45 45 45 66 45 51 25 45 30
51 51 51 51 76 20 45 20 20 51 51 25 51 51 45 51 51 3[25
1[25 56 61 61 86 61 66 56 61 66 1[61 71 66 76 51 61 45
25 66 71 56 61 66 66 61 61 1[51 4[25 51 51 51 51 51 51
51 51 51 51 25 25 30 25 2[30 30 20 61 3[32 30[45 45 2[{
 TeXBase1Encoding ReEncodeFont }86 90.9091 /NimbusSanL-Regu
rf /Fh 32[73 100[60 66 66 93 66 73 40 66 47 73 73 73
73 106 33 66 33 33 73 73 40 66 73 66 73 66 7[80 2[80
1[73 80 86 1[80 93 86 100 73 86 1[33 86 93 73 80 86 86
86 86 6[40 66 1[66 66 66 66 66 66 66 66 1[33 1[33 5[86
35[73 2[{ TeXBase1Encoding ReEncodeFont }61 119.552 /NimbusSanL-Bold
rf /Fi 134[60 2[60 66 33 60 40 66 66 66 66 100 27 60
1[27 66 66 33 66 66 60 66 66 13[80 5[100 3[33 3[80 1[86
1[80 6[33 23[42 31[60 2[{ TeXBase1Encoding ReEncodeFont }31
119.552 /NimbusSanL-Regu rf /Fj 134[96 2[96 105 57 96
67 1[105 105 105 153 48 96 1[48 105 105 57 96 105 96
105 96 10[115 1[105 115 5[143 105 2[48 2[105 115 124
124 124 124 10[96 96 96 96 96 96 3[57 45[{
 TeXBase1Encoding ReEncodeFont }40 172.188 /NimbusSanL-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.a) cvn /DEST pdfmark end
 142 -8 a
Black 0 TeXcolorgray Black 0 TeXcolorgray 150 286 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 150
286 a 150 286 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 286 a 150 286 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 150 286 a 150 286
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 286 a 150 286 a
0.8 setlinewidth 0 setgray
 150 286 a 150 286 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 150 286 a 150
286 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 150 286 a 150 286 a
SDict begin H.S end
 150 286 a 150 286 a
SDict begin 13.6 H.A end
 150 286
a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 150 286 a 0 TeXcolorgray 0 TeXcolorgray 201
411 a Fj(De)m(velopment)49 b(of)f(a)g(vibr)m(otactile)f(stim)m(ulation)
480 581 y(system)g(f)m(or)h(cognitive)g(rehabilitation)1348
1546 y(Master)f(Thesis)p 150 1396 3544 4 v 150 1575 4
181 v 3690 1575 V 150 1577 3544 4 v 462 2107 a Fi(In)34
b(par)5 b(tial)33 b(ful\002llment)g(of)h(the)h(requirements)f(f)l(or)h
(the)f(deg)o(ree)960 2549 y("Master)g(of)g(Science)f(in)h(Engineer)r
(ing")1481 3109 y(Study)g(prog)o(r)o(am:)852 3315 y Fh(Mec)o(hatr)n
(onics)g(&)g(Smar)r(t)f(T)-7 b(ec)o(hnologies)1062 3521
y Fi(Management)35 b(Center)g(Innsbr)r(uc)n(k)1583 4081
y(Super)t(visor)t(:)1195 4287 y Fh(Pr)n(of)o(.)40 b(Y)-10
b(eongmi)35 b(Kim,)f(PhD)1694 4729 y Fi(A)l(uthor)t(:)1565
4935 y Fh(Lukas)g(Sie\337)1614 5141 y(52010293)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 1 2
TeXDict begin 1 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.I) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 150 120 3461 4 v 0 TeXcolorgray
0 TeXcolorgray 150 377 a
SDict begin H.S end
 150 377 a 150 377 a
SDict begin 18 H.A end
 150 377
a 150 377 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 150 377 a Fh(Dec)n(laration)35 b(in)e(Lieu)h(of)g(Oath)p
0 TeXcolorgray 138 656 a Fg(\204I)e(hereb)n(y)f(declare)o(,)i(under)d
(oath,)j(that)e(this)h(master)g(thesis)g(has)g(been)e(m)o(y)h
(independent)e(w)o(or)q(k)150 769 y(and)d(has)h(not)f(been)g(aided)f
(with)i(an)o(y)f(prohibited)g(means)o(.)36 b(I)27 b(declare)o(,)g(to)g
(the)f(best)h(of)g(m)o(y)g(kno)o(wl-)150 881 y(edge)32
b(and)g(belief)m(,)k(that)e(all)g(passages)e(tak)n(en)i(from)f(pub)n
(lished)g(and)f(unpub)n(lished)f(sources)j(or)150 994
y(docments)j(ha)n(v)n(e)f(been)g(reproduced)f(whether)h(as)i(or)q
(iginal,)i(slightlychanged)c(or)h(in)h(thought,)150 1107
y(ha)n(v)n(e)f(been)e(mentioned)g(as)j(such)f(at)h(the)f(corresponding)
e(placesof)i(the)g(thesis)o(,)k(b)n(y)d(citation,)147
1220 y(where)24 b(the)g(e)m(xtend)h(of)g(the)f(or)q(iginal)h(quotes)f
(is)i(indicated.\223)p 150 1898 1182 2 v 2430 1898 V
367 2011 a(Place)o(,)f(Date)1939 b(Signature)p 0 TeXcolorgray
1868 5816 a(I)p 0 TeXcolorgray eop end
%%Page: 2 3
TeXDict begin 2 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.II) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 150 120 3461 4 v 0 TeXcolorgray
0 TeXcolorgray 150 377 a
SDict begin H.S end
 150 377 a 150 377 a
SDict begin 18 H.A end
 150 377
a 150 377 a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 150 377 a Fh(K)l(urzfassung)p 0 TeXcolorgray
147 656 a Fg(T)-11 b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11
b(e)m(xt)32 b(T)-11 b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11
b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11
b(e)m(xt)31 b(T)-11 b(e)m(xt)32 b(T)-11 b(e)m(xt)31 b(T)-11
b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11
b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11
b(e)m(xt)147 769 y(T)g(e)m(xt)26 b(T)-11 b(e)m(xt)25
b(T)-11 b(e)m(xt)26 b(T)-11 b(e)m(xt)25 b(T)-11 b(e)m(xt)25
b(T)-11 b(e)m(xt)26 b(...)p 0 TeXcolorgray 150 1092 a
SDict begin H.S end

150 1092 a 150 1092 a
SDict begin 13.6 H.A end
 150 1092 a 150 1092 a
SDict begin [/View [/XYZ H.V]/Dest (section*.3) cvn /DEST pdfmark end
 150 1092
a Ff(Sc)o(hla)o(gw\366r)r(ter:)p 0 TeXcolorgray 89 w
Fg(Schlagw)o(or)t(t)d(1,)i(Schlagw)o(or)t(t)e(2,)i(Schlagw)o(or)t(t)e
(3,)h(Schlagw)o(or)t(t)g(4,)g(Schlagw)o(or)t(t)150 1205
y(5)p 0 TeXcolorgray 1855 5816 a(II)p 0 TeXcolorgray
eop end
%%Page: 3 4
TeXDict begin 3 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.III) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 150 120 3461 4 v 0 TeXcolorgray
0 TeXcolorgray 150 377 a
SDict begin H.S end
 150 377 a 150 377 a
SDict begin 18 H.A end
 150 377
a 150 377 a
SDict begin [/View [/XYZ H.V]/Dest (section*.4) cvn /DEST pdfmark end
 150 377 a Fh(Abstract)p 0 TeXcolorgray 147
656 a Fg(T)-11 b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11
b(e)m(xt)32 b(T)-11 b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11
b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11
b(e)m(xt)31 b(T)-11 b(e)m(xt)32 b(T)-11 b(e)m(xt)31 b(T)-11
b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11
b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11 b(e)m(xt)31 b(T)-11
b(e)m(xt)147 769 y(T)g(e)m(xt)26 b(T)-11 b(e)m(xt)25
b(T)-11 b(e)m(xt)26 b(T)-11 b(e)m(xt)25 b(T)-11 b(e)m(xt)25
b(T)-11 b(e)m(xt)26 b(...)p 0 TeXcolorgray 150 1092 a
SDict begin H.S end

150 1092 a 150 1092 a
SDict begin 13.6 H.A end
 150 1092 a 150 1092 a
SDict begin [/View [/XYZ H.V]/Dest (section*.5) cvn /DEST pdfmark end
 150 1092
a Ff(K)o(e)o(yw)n(or)n(ds:)p 0 TeXcolorgray 88 w Fg(K)l(e)n(yw)o(ord)f
(1,)g(K)l(e)n(yw)o(ord)f(2,)i(K)l(e)n(yw)o(ord)e(3,)h(K)l(e)n(yw)o(ord)
g(4,)g(K)l(e)n(yw)o(ord)f(5)p 0 TeXcolorgray 1842 5816
a(III)p 0 TeXcolorgray eop end
%%Page: 4 5
TeXDict begin 4 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.IV) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 150 286
a
SDict begin H.S end
 150 286 a 150 286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (toc.0) cvn /DEST pdfmark end
 150 286 a 150
286 a
SDict begin H.S end
 150 286 a 150 286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (chapter*.6) cvn /DEST pdfmark end
 150 286
a 0 TeXcolorgray 615 x Fj(Contents)p 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 1837 5816 a Fg(IV)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 1 6
TeXDict begin 1 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 150 286
a
SDict begin H.S end
 150 286 a 150 286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.1) cvn /DEST pdfmark end
 150 286 a 0
TeXcolorgray 145 901 a Fj(1)86 b(Intr)m(oduction)p 0
TeXcolorgray 150 1098 a
SDict begin H.S end
 150 1098 a 150 1098 a
SDict begin 13.6 H.A end
 150 1098
a 150 1098 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.1) cvn /DEST pdfmark
end
 150 1098 a 0 TeXcolorgray 203 x Fh(1.1)61
b(Motiv)n(ation)34 b(and)f(Pr)n(ob)o(lem)g(Statement)p
0 TeXcolorgray 150 1580 a Fg([)p Ff(?)p Fg(],)26 b([)p
Ff(?)o Fg(])150 1749 y([)p Ff(?)p Fg(])150 1919 y([)p
Ff(?)p Fg(],)g([)p Ff(?)o Fg(],)g([)p Ff(?)p Fg(])150
2103 y
SDict begin H.S end
 150 2103 a 150 2103 a
SDict begin 13.6 H.A end
 150 2103 a 150 2103 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.2) cvn /DEST pdfmark
end
 150
2103 a 0 TeXcolorgray 188 x Fh(1.2)61 b(Objectives)36
b(of)d(the)h(Thesis)p 0 TeXcolorgray 150 2570 a Fg(Er)q(l"auter)r(n)27
b(Sie)g(an)f(dieser)h(Stelle)f Fe(genau)k Fg(w)o(as)c(ihre)h(A)m
(ufgabe)e(ist.)39 b(Gegebenf)m(alls)25 b(g)o(renz)o(en)g(Sie)150
2683 y(auch)i(die)g(T)-11 b(eile)28 b(aus)o(,)g(w)o(elche)f(nicht)h(im)
g(Umf)m(ang)e(der)i(Arbeit)f(liegen.)38 b(Dies)28 b(kann)f(Ihnen)g
(gegen)150 2796 y(Ende)d(ihrer)h(Arbeit)f(bei)h(der)g(Argumentation)d
(helf)m(en.)150 2982 y
SDict begin H.S end
 150 2982 a 150 2982 a
SDict begin 13.6 H.A end
 150 2982
a 150 2982 a
SDict begin [/View [/XYZ H.V]/Dest (section.1.3) cvn /DEST pdfmark
end
 150 2982 a 0 TeXcolorgray 186 x Fh(1.3)61
b(Structure)33 b(of)g(the)g(Thesis)p 0 TeXcolorgray 150
3447 a Fg(Geben)20 b(Sie)i(in)g(diesem)g(Abschnitt)g(eine)f(g)o(robe)g
(V)-7 b(or)o(ausschau)21 b(auf)h(den)f(A)m(ufbau)f(der)i(Arbeit.)30
b(Die)147 3560 y(Arbeit)36 b(k"onnte)f(empir)q(isch)h(motivier)t(t)g
(sein)g(und)f(mit)h(der)g(A)m(us)m(w)o(er)t(tung)e(eines)i(Exper)q
(imentes)150 3672 y(beginnen)c(oder)i(theoreitsch)h(und)f(somit)i
(logischerw)o(eise)e(mit)i(einem)e(Theor)q(iekapitel)f(begin-)150
3785 y(nen.)150 3955 y(Etst)p 0 TeXcolorgray 0 TeXcolorgray
1855 5816 a(1)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 7
TeXDict begin 2 6 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 150 286
a
SDict begin H.S end
 150 286 a 150 286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.2) cvn /DEST pdfmark end
 150 286 a 0
TeXcolorgray 615 x Fj(2)86 b(Theoretical)47 b(Bac)m(kgr)m(ound)p
0 TeXcolorgray 150 1134 a
SDict begin H.S end
 150 1134 a 150 1134 a
SDict begin 13.6 H.A end
 150 1134
a 150 1134 a
SDict begin [/View [/XYZ H.V]/Dest (section.2.1) cvn /DEST pdfmark
end
 150 1134 a 0 TeXcolorgray 167 x Fh(2.1)61
b(Neur)n(odeg)q(enerative)36 b(Diseases)g(with)e(Cognitive)376
1451 y(Impairmentss)p 0 TeXcolorgray 150 1585 a
SDict begin H.S end
 150 1585
a 150 1585 a
SDict begin 13.6 H.A end
 150 1585 a 150 1585 a
SDict begin [/View [/XYZ H.V]/Dest (section.2.2) cvn /DEST pdfmark
end
 150 1585 a 0 TeXcolorgray
181 x Fh(2.2)61 b(Actuation)34 b(T)-7 b(ec)o(hnologies)36
b(f)n(or)c(Haptic)j(Feedbac)n(ks)p 0 TeXcolorgray 150
1902 a
SDict begin H.S end
 150 1902 a 150 1902 a
SDict begin 13.6 H.A end
 150 1902 a 150 1902 a
SDict begin [/View [/XYZ H.V]/Dest (section.2.3) cvn /DEST pdfmark
end
 150
1902 a 0 TeXcolorgray 179 x Fh(2.3)61 b(Cognitive)35
b(Rehabilitation:)43 b(Concepts,)35 b(Methods,)f(and)g(T)-10
b(ar)n(g)q(et)376 2231 y(Gr)n(oups)p 0 TeXcolorgray 150
2509 a Fg(Multidisziplin\344re)25 b(Ans\344tz)o(e)f([)p
Ff(?)p Fg(])150 2679 y(EEG-Biomar)q(k)n(er)e(wie)h(der)g(Br)o(ain)f
(Symmetr)s(y)h(Inde)m(x)g(\(BSI\))h(und)d(der)i(Later)o(ality)g
(Coef\002cient)g(\(LC\))150 2792 y(er)q(lauben)i(eine)g(objektiv)n(e)i
(Be)n(w)o(er)t(tung)d(des)i(funktionellen)f(Zustands)h(des)g(Gehir)r
(ns)o(.)35 b(Die)26 b(EEG-)147 2905 y(Analyse)39 b(er)r(m\366glicht)g
(eine)f(individualisier)t(te)h(Rehabilitationssteuer)q(ung,)h(indem)e
(sie)i(V)-7 b(er\344n-)150 3017 y(der)q(ungen)25 b(in)j(der)f(Hir)r
(naktivit\344t)i(erf)m(asst)g(\226)f(insbesondere)d(im)j(Zusammenhang)c
(mit)k(Motor)f(Im-)150 3130 y(ager)s(y)-9 b(,)30 b(einer)e(etab)n(lier)
t(ten)g(k)n(ognitiv)n(en)h(Rehabilitationsmethode)o(.)40
b(Die)29 b(Zielg)o(r)q(uppe)e(der)i(Studie)150 3243 y(sind)j(Schlaganf)
m(allpatienten,)e(die)i(oft)g(so)o(w)o(ohl)e(motor)q(ische)i(als)h
(auch)e(k)n(ognitiv)n(e)g(Beeintr\344chti-)150 3356 y(gungen)23
b(aufw)o(eisen.)150 3526 y([)p Ff(?)p Fg(])p 0 TeXcolorgray
150 3587 a
SDict begin H.S end
 150 3587 a 150 3587 a
SDict begin 13.6 H.A end
 150 3587 a 150 3587
a
SDict begin [/View [/XYZ H.V]/Dest (table.caption.7) cvn /DEST pdfmark
end
 150 3587 a 0 TeXcolorgray 576 3805 a Fd(T)-7 b(ab)o(le)40
b(2.1)p 0 TeXcolorgray 40 w Fg(ergleich)j(v)n(erschiedener)g(Studien)f
(zur)i(taktilen)g(niederfre-)578 3918 y(quenten)23 b(Vibr)o(ation)h(in)
h(der)g(Demenzbehandlung)p 0 TeXcolorgray 0 TeXcolorgray
1707 4092 a
 currentpoint currentpoint translate 0.04868 0.04868 scale neg exch
neg exch translate
 1707 4092 a 1728 3754 7067 8 v 2133 3844
a Fc(Studie)19 b(\(A)n(utor)l(,)g(J)o(ahr\))794 b(Vibr)o(ationsar)s(t)
1019 b(Dauer)19 b(/)h(H\344u\002gk)o(eit)1117 b(Ergebnisse)890
b(Anw)o(endungsk)o(onte)n(xt)p 1728 3891 7067 5 v 1819
3981 a(Clements-Cor)s(tes)19 b(et)h(al.,)f(2016)99 b(Vibroakustisch)18
b(\(40)i(Hz,)h(Musik,)g(ph)n(ysioakustischer)d(Stuhl\))271
b(2x/W)n(oche)o(,)18 b(6)i(W)n(ochen)416 b(V)-6 b(erbesser)s(te)19
b(SLUMS-W)n(er)s(te)o(,)e(mehr)j(A)n(ufmer)q(ksamk)o(eit)244
b(Amb)o(ulante)17 b(Einr)q(ichtung)1778 4072 y(Clements-Cor)s(tes)h(et)
i(al.,)g(2017a)188 b(Vibroakustisch)19 b(\(40)h(Hz,)g(t\344gliche)f
(Heimanw)o(endung\))446 b(T\344glich,)18 b(3)j(J)o(ahre)393
b(Stabile)18 b(MMSE-W)n(er)s(te)h(\374ber)g(3)i(J)o(ahre)o(,)d
(reduzier)s(te)g(F)m(r)q(ustr)o(ation)133 b(Heimanw)o(endung)2147
4163 y(Kim)21 b(und)e(Lee)o(,)g(2018)98 b(Mechanisch)19
b(\(WBV)-9 b(,)20 b(F)m(requenzsteiger)q(ung)15 b(v)n(on)20
b(20\22635)f(Hz\))272 b(5x/W)n(oche)o(,)18 b(8)i(W)n(ochen)362
b(Signi\002kante)18 b(EEG-Aktivier)q(ung,)g(k)o(ognitiv)n(e)h(V)-6
b(erbesser)q(ung)189 b(Gemeindez)o(entren)2238 4255 y(Lam)20
b(et)g(al.,)f(2018)281 b(Mechanisch)19 b(\(WBV)-9 b(,)20
b(30)f(Hz,)i(2)g(mm)g(Amplitude\))452 b(2x/W)n(oche)o(,)18
b(9)i(W)n(ochen)270 b(V)-6 b(erbesser)s(te)19 b(Mobilit\344t,)e
(Gleichge)o(wicht,)h(hohe)g(T)-9 b(eilnahmequote)95 b(T)-9
b(agesp\003ege)1918 4350 y(Heesterbeek)18 b(et)i(al.,)g(2019a)238
b(Mechanisch)20 b(\(WBV)-9 b(,)19 b(30)h(Hz,)h(1\2262)e(mm)i
(Amplitude\))238 b(Mehrf)n(ach/W)n(oche)o(,)17 b(Dauer)i(12)h(Min)373
b(Gute)20 b(Akz)o(eptanz,)f(einige)g(ber)q(ichtete)f(\334belk)o(eit)371
b(P\003egeheim)p 1728 4400 7067 8 v 1707 4092 a
 currentpoint currentpoint translate 1 0.04868 div 1 0.04868 div scale
neg exch neg exch translate
 1707
4092 a 0 TeXcolorgray 150 4317 a
SDict begin H.S end
 150 4317 a 150 4317
a
SDict begin 13.6 H.A end
 150 4317 a 150 4317 a
SDict begin [/View [/XYZ H.V]/Dest (section.2.4) cvn /DEST pdfmark
end
 150 4317 a 0 TeXcolorgray 188
x Fh(2.4)61 b(Vibr)n(otactile)34 b(Stim)n(ulation:)41
b(Principles)35 b(and)f(Therapeutic)372 4654 y(Applications)p
0 TeXcolorgray 150 4933 a Fg([)p Ff(?)p Fg(])150 5102
y([)p Ff(?)p Fg(,)25 b Ff(?)p Fg(,)g Ff(?)p Fg(,)h Ff(?)o
Fg(,)g Ff(?)o Fg(,)g Ff(?)o Fg(,)g Ff(?)o Fg(,)g Ff(?)o
Fg(,)g Ff(?)p Fg(])p 0 TeXcolorgray 0 TeXcolorgray 1855
5816 a(2)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 3 8
TeXDict begin 3 7 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 150 82 a Fg(2.)25 b(Theoretical)f(Bac)n
(kg)o(round)p 150 120 3461 4 v 0 TeXcolorgray 150 286
a
SDict begin H.S end
 150 286 a 150 286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (section.2.5) cvn /DEST pdfmark
end
 150 286 a 0
TeXcolorgray 91 x Fh(2.5)61 b(Actuation)34 b(T)-7 b(ec)o(hnologies)36
b(f)n(or)c(Haptic)j(Feedbac)n(ks)p 0 TeXcolorgray 147
656 a Fg(40)25 b(Hz)g(&)g(Gamma)f(F)l(requenz)o(en,)e([)p
Ff(?)p Fg(])j([)p Ff(?)p Fg(])h([)p Ff(?)o Fg(])g([)p
Ff(?)p Fg(])f(z)o(eigen)f(neurobiologische)e(Wir)q(kung)150
842 y
SDict begin H.S end
 150 842 a 150 842 a
SDict begin 13.6 H.A end
 150 842 a 150 842 a
SDict begin [/View [/XYZ H.V]/Dest (section.2.6) cvn /DEST pdfmark
end
 150 842
a 0 TeXcolorgray 186 x Fh(2.6)61 b(V)-11 b(oice)34 b(Coil)g(Actuator)n
(s)h(f)n(or)d(Vibr)n(otactile)i(Stim)n(ulation)p 0 TeXcolorgray
150 1307 a Fg(EEG)24 b(&)h(W)m(ear)o(ab)n(les)f([)p Ff(?)p
Fg(])i([)p Ff(?)p Fg(])f([)p Ff(?)p Fg(])h([)p Ff(?)o
Fg(])g(\374ber)e(EEG-T)-11 b(ech,)24 b(BCI,)h(und)f(mobile)g(Erf)m
(assung)150 1493 y
SDict begin H.S end
 150 1493 a 150 1493 a
SDict begin 13.6 H.A end
 150 1493 a 150
1493 a
SDict begin [/View [/XYZ H.V]/Dest (section.2.7) cvn /DEST pdfmark
end
 150 1493 a 0 TeXcolorgray 186 x Fh(2.7)61 b(Over)q(vie)n(w)35
b(of)e(Existing)i(Vibr)n(otactile)f(Stim)n(ulation)f(Systems)p
0 TeXcolorgray 0 TeXcolorgray 1855 5816 a Fg(3)p 0 TeXcolorgray
eop end
%%Page: 4 9
TeXDict begin 4 8 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 150 286
a
SDict begin H.S end
 150 286 a 150 286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.3) cvn /DEST pdfmark end
 150 286 a 0
TeXcolorgray 615 x Fj(3)86 b(Anal)m(ysis)47 b(of)i(the)f(Current)h
(VCA-Based)332 1108 y(System)p 0 TeXcolorgray 150 1339
a
SDict begin H.S end
 150 1339 a 150 1339 a
SDict begin 13.6 H.A end
 150 1339 a 150 1339 a
SDict begin [/View [/XYZ H.V]/Dest (section.3.1) cvn /DEST pdfmark
end
 150 1339
a 0 TeXcolorgray 170 x Fh(3.1)61 b(Over)q(vie)n(w)35
b(of)e(the)h(Current)f(VCA)g(System)p 0 TeXcolorgray
147 1788 a Fg(This)41 b(section)h(pro)o(vides)f(an)f(o)o(v)n(er)s(vie)n
(w)h(of)g(the)g(e)m(xisting)h(V)-7 b(oice)40 b(Coil)h(Actuator)g
(\(VCA\)-based)150 1900 y(setup)m(.)31 b(The)24 b(System)h(consists)i
(of)e(se)m(v)n(en)g(main)f(par)t(ts)o(.)p 0 TeXcolorgray
300 2095 a(\225)p 0 TeXcolorgray 45 w(Spr)q(ing)h(fr)o(ame)f
(\(Minimizing)h(the)g(loss)h(of)f(v)n(er)t(tical)g(motion)f(tr)o
(ansmitted)h(to)h(the)e(node\))p 0 TeXcolorgray 300 2264
a(\225)p 0 TeXcolorgray 45 w(Magnet)g(Housing)f(\(\002x)m(ed)j
(Magnetic)e(\002eld)h(is)h(alw)o(a)m(ys)f(f)m(or)r(med\))p
0 TeXcolorgray 300 2433 a(\225)p 0 TeXcolorgray 45 w(Bob)o(bin)f(Coil)g
(\(Magnetic)h(\002eld)g(is)h(f)m(or)r(med)e(only)h(when)f(current)h
(\003o)o(ws\))p 0 TeXcolorgray 300 2603 a(\225)p 0 TeXcolorgray
45 w(Node)31 b(\(T)-11 b(r)o(ansmitting)33 b(v)n(er)t(tical)g(motion)f
(directly)h(to)g(the)f(human)f(body)h(as)h(sound)e(and)h(vi-)377
2716 y(br)o(ation\))p 0 TeXcolorgray 300 2885 a(\225)p
0 TeXcolorgray 45 w(Node)24 b(scre)n(w)i(\(\002x)m(es)g(the)f(node)e
(to)j(the)e(bob)o(bin)f(coil\))p 0 TeXcolorgray 300 3054
a(\225)p 0 TeXcolorgray 45 w(Rub)o(ber)i(fr)o(ame)h(\(Suppresses)g
(vibr)o(ation)g(from)g(the)g(body)g(from)g(being)f(tr)o(ansmitted)h(to)
g(the)377 3167 y(outside)f(w)o(or)q(ld\))p 0 TeXcolorgray
300 3337 a(\225)p 0 TeXcolorgray 45 w(Connection)d(PCB)h(\(T)-11
b(ak)n(e)24 b(the)f(analog)f(signal)i(from)f(the)h(AMP)f(and)g(apply)g
(it)h(to)g(the)g(bob)o(bin)377 3450 y(coil\))p 0 TeXcolorgray
0 TeXcolorgray 1855 5816 a(4)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 5 10
TeXDict begin 5 9 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 150 82 a Fg(3.)25 b(Analysis)h(of)f(the)g
(Current)f(VCA-Based)f(System)p 150 120 3461 4 v 0 TeXcolorgray
150 286 a
SDict begin H.S end
 150 286 a 150 286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (section.3.2) cvn /DEST pdfmark
end
 150
286 a 0 TeXcolorgray 91 x Fh(3.2)61 b(Dynamic)35 b(Beha)n(vior:)43
b(Frequenc)o(y)35 b(Measurement)p 0 TeXcolorgray 150
511 a
SDict begin H.S end
 150 511 a 150 511 a
SDict begin 13.6 H.A end
 150 511 a 150 511 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.3.2.1) cvn /DEST pdfmark
end
 150 511
a 0 TeXcolorgray 148 x Fb(3.2.1)50 b(Objective)p 0 TeXcolorgray
150 751 a
SDict begin H.S end
 150 751 a 150 751 a
SDict begin 13.6 H.A end
 150 751 a 150 751 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.3.2.2) cvn /DEST pdfmark
end
 150
751 a 0 TeXcolorgray 152 x Fb(3.2.2)g(Measurement)29
b(Setup)p 0 TeXcolorgray 150 995 a
SDict begin H.S end
 150 995 a 150 995
a
SDict begin 13.6 H.A end
 150 995 a 150 995 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.3.2.3) cvn /DEST pdfmark
end
 150 995 a 0 TeXcolorgray 152 x
Fb(3.2.3)50 b(Results)29 b(&)f(Interpretation)p 0 TeXcolorgray
0 TeXcolorgray 150 1290 a
SDict begin H.S end
 150 1290 a 150 1290 a
SDict begin 13.6 H.A end
 150 1290
a 150 1290 a
SDict begin [/View [/XYZ H.V]/Dest (figure.caption.8) cvn /DEST pdfmark
end
 150 1290 a 808 2956 a @beginspecial 0 @llx
0 @lly 420 @urx 315 @ury 2574 @rwi @setspecial
%%BeginDocument: img/SpringTest.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: (MATLAB, The Mathworks, Inc. Version 24.2.0.2833386 \(R2024b\) Update 4. Operating System: Windows 10)
%%Title: D:/11_GIT/LaTeX/02_Master/04_MasterThesis/img/SpringTest.eps
%%CreationDate: 2025-05-14T22:24:00
%%Pages: (atend)
%%BoundingBox:     0     0   420   315
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
%%BeginResource: procset (Apache XML Graphics Std ProcSet) 1.2 0
%%Version: 1.2 0
%%Copyright: (Copyright 2001-2003,2010 The Apache Software Foundation. License terms: http://www.apache.org/licenses/LICENSE-2.0)
/bd{bind def}bind def
/ld{load def}bd
/GR/grestore ld
/GS/gsave ld
/RM/rmoveto ld
/C/curveto ld
/t/show ld
/L/lineto ld
/ML/setmiterlimit ld
/CT/concat ld
/f/fill ld
/N/newpath ld
/S/stroke ld
/CC/setcmykcolor ld
/A/ashow ld
/cp/closepath ld
/RC/setrgbcolor ld
/LJ/setlinejoin ld
/GC/setgray ld
/LW/setlinewidth ld
/M/moveto ld
/re {4 2 roll M
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
cp } bd
/_ctm matrix def
/_tm matrix def
/BT { _ctm currentmatrix pop matrix _tm copy pop 0 0 moveto } bd
/ET { _ctm setmatrix } bd
/iTm { _ctm setmatrix _tm concat } bd
/Tm { _tm astore pop iTm 0 0 moveto } bd
/ux 0.0 def
/uy 0.0 def
/F {
  /Tp exch def
  /Tf exch def
  Tf findfont Tp scalefont setfont
  /cf Tf def  /cs Tp def
} bd
/ULS {currentpoint /uy exch def /ux exch def} bd
/ULE {
  /Tcx currentpoint pop def
  gsave
  newpath
  cf findfont cs scalefont dup
  /FontMatrix get 0 get /Ts exch def /FontInfo get dup
  /UnderlinePosition get Ts mul /To exch def
  /UnderlineThickness get Ts mul /Tt exch def
  ux uy To add moveto  Tcx uy To add lineto
  Tt setlinewidth stroke
  grestore
} bd
/OLE {
  /Tcx currentpoint pop def
  gsave
  newpath
  cf findfont cs scalefont dup
  /FontMatrix get 0 get /Ts exch def /FontInfo get dup
  /UnderlinePosition get Ts mul /To exch def
  /UnderlineThickness get Ts mul /Tt exch def
  ux uy To add cs add moveto Tcx uy To add cs add lineto
  Tt setlinewidth stroke
  grestore
} bd
/SOE {
  /Tcx currentpoint pop def
  gsave
  newpath
  cf findfont cs scalefont dup
  /FontMatrix get 0 get /Ts exch def /FontInfo get dup
  /UnderlinePosition get Ts mul /To exch def
  /UnderlineThickness get Ts mul /Tt exch def
  ux uy To add cs 10 mul 26 idiv add moveto Tcx uy To add cs 10 mul 26 idiv add lineto
  Tt setlinewidth stroke
  grestore
} bd
/QT {
/Y22 exch store
/X22 exch store
/Y21 exch store
/X21 exch store
currentpoint
/Y21 load 2 mul add 3 div exch
/X21 load 2 mul add 3 div exch
/X21 load 2 mul /X22 load add 3 div
/Y21 load 2 mul /Y22 load add 3 div
/X22 load /Y22 load curveto
} bd
/SSPD {
dup length /d exch dict def
{
/v exch def
/k exch def
currentpagedevice k known {
/cpdv currentpagedevice k get def
v cpdv ne {
/upd false def
/nullv v type /nulltype eq def
/nullcpdv cpdv type /nulltype eq def
nullv nullcpdv or
{
/upd true def
} {
/sametype v type cpdv type eq def
sametype {
v type /arraytype eq {
/vlen v length def
/cpdvlen cpdv length def
vlen cpdvlen eq {
0 1 vlen 1 sub {
/i exch def
/obj v i get def
/cpdobj cpdv i get def
obj cpdobj ne {
/upd true def
exit
} if
} for
} {
/upd true def
} ifelse
} {
v type /dicttype eq {
v {
/dv exch def
/dk exch def
/cpddv cpdv dk get def
dv cpddv ne {
/upd true def
exit
} if
} forall
} {
/upd true def
} ifelse
} ifelse
} if
} ifelse
upd true eq {
d k v put
} if
} if
} if
} forall
d length 0 gt {
d setpagedevice
} if
} bd
/RE { % /NewFontName [NewEncodingArray] /FontName RE -
  findfont dup length dict begin
  {
    1 index /FID ne
    {def} {pop pop} ifelse
  } forall
  /Encoding exch def
  /FontName 1 index def
  currentdict definefont pop
  end
} bind def
%%EndResource
%%BeginResource: procset (Apache XML Graphics EPS ProcSet) 1.0 0
%%Version: 1.0 0
%%Copyright: (Copyright 2002-2003 The Apache Software Foundation. License terms: http://www.apache.org/licenses/LICENSE-2.0)
/BeginEPSF { %def
/b4_Inc_state save def         % Save state for cleanup
/dict_count countdictstack def % Count objects on dict stack
/op_count count 1 sub def      % Count objects on operand stack
userdict begin                 % Push userdict on dict stack
/showpage { } def              % Redefine showpage, { } = null proc
0 setgray 0 setlinecap         % Prepare graphics state
1 setlinewidth 0 setlinejoin
10 setmiterlimit [ ] 0 setdash newpath
/languagelevel where           % If level not equal to 1 then
{pop languagelevel             % set strokeadjust and
1 ne                           % overprint to their defaults.
{false setstrokeadjust false setoverprint
} if
} if
} bd
/EndEPSF { %def
count op_count sub {pop} repeat            % Clean up stacks
countdictstack dict_count sub {end} repeat
b4_Inc_state restore
} bd
%%EndResource
%FOPBeginFontDict
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-BoldOblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font ZapfDingbats
%%IncludeResource: font Symbol
%%IncludeResource: font Helvetica
%%IncludeResource: font Helvetica-Oblique
%%IncludeResource: font Helvetica-Bold
%%IncludeResource: font Helvetica-BoldOblique
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Italic
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-BoldItalic
%%IncludeResource: font Courier
%FOPEndFontDict
%%BeginResource: encoding WinAnsiEncoding
/WinAnsiEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle
/parenleft /parenright /asterisk /plus /comma
/hyphen /period /slash /zero /one
/two /three /four /five /six
/seven /eight /nine /colon /semicolon
/less /equal /greater /question /at
/A /B /C /D /E
/F /G /H /I /J
/K /L /M /N /O
/P /Q /R /S /T
/U /V /W /X /Y
/Z /bracketleft /backslash /bracketright /asciicircum
/underscore /quoteleft /a /b /c
/d /e /f /g /h
/i /j /k /l /m
/n /o /p /q /r
/s /t /u /v /w
/x /y /z /braceleft /bar
/braceright /asciitilde /bullet /Euro /bullet
/quotesinglbase /florin /quotedblbase /ellipsis /dagger
/daggerdbl /circumflex /perthousand /Scaron /guilsinglleft
/OE /bullet /Zcaron /bullet /bullet
/quoteleft /quoteright /quotedblleft /quotedblright /bullet
/endash /emdash /asciitilde /trademark /scaron
/guilsinglright /oe /bullet /zcaron /Ydieresis
/space /exclamdown /cent /sterling /currency
/yen /brokenbar /section /dieresis /copyright
/ordfeminine /guillemotleft /logicalnot /sfthyphen /registered
/macron /degree /plusminus /twosuperior /threesuperior
/acute /mu /paragraph /middot /cedilla
/onesuperior /ordmasculine /guillemotright /onequarter /onehalf
/threequarters /questiondown /Agrave /Aacute /Acircumflex
/Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave
/Iacute /Icircumflex /Idieresis /Eth /Ntilde
/Ograve /Oacute /Ocircumflex /Otilde /Odieresis
/multiply /Oslash /Ugrave /Uacute /Ucircumflex
/Udieresis /Yacute /Thorn /germandbls /agrave
/aacute /acircumflex /atilde /adieresis /aring
/ae /ccedilla /egrave /eacute /ecircumflex
/edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex
/otilde /odieresis /divide /oslash /ugrave
/uacute /ucircumflex /udieresis /yacute /thorn
/ydieresis
] def
%%EndResource
%FOPBeginFontReencode
/Courier-Oblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding WinAnsiEncoding def
  currentdict
end
/Courier-Oblique exch definefont pop
/Courier-BoldOblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding WinAnsiEncoding def
  currentdict
end
/Courier-BoldOblique exch definefont pop
/Courier-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding WinAnsiEncoding def
  currentdict
end
/Courier-Bold exch definefont pop
/Helvetica findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding WinAnsiEncoding def
  currentdict
end
/Helvetica exch definefont pop
/Helvetica-Oblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding WinAnsiEncoding def
  currentdict
end
/Helvetica-Oblique exch definefont pop
/Helvetica-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding WinAnsiEncoding def
  currentdict
end
/Helvetica-Bold exch definefont pop
/Helvetica-BoldOblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding WinAnsiEncoding def
  currentdict
end
/Helvetica-BoldOblique exch definefont pop
/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding WinAnsiEncoding def
  currentdict
end
/Times-Roman exch definefont pop
/Times-Italic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding WinAnsiEncoding def
  currentdict
end
/Times-Italic exch definefont pop
/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding WinAnsiEncoding def
  currentdict
end
/Times-Bold exch definefont pop
/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding WinAnsiEncoding def
  currentdict
end
/Times-BoldItalic exch definefont pop
/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding WinAnsiEncoding def
  currentdict
end
/Courier exch definefont pop
%FOPEndFontReencode
%%EndProlog
%%Page: 1 1
%%PageBoundingBox: 0 0 420 315
%%BeginPageSetup
[1 0 0 -1 0 315] CT
%%EndPageSetup
GS
[0.75 0 0 0.75 0 0] CT
1 GC
N
0 0 560 420 re
f
GR
GS
[0.75 0 0 0.75 0 0] CT
1 GC
N
0 0 560 420 re
f
GR
GS
[0.75 0 0 0.75 0 0] CT
1 GC
N
73 374 M
507 374 L
507 31 L
73 31 L
cp
f
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
73 374 M
73 31 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
127.25 374 M
127.25 31 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
181.5 374 M
181.5 31 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
235.75 374 M
235.75 31 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
290 374 M
290 31 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
344.25 374 M
344.25 31 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
398.5 374 M
398.5 31 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
452.75 374 M
452.75 31 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
507 374 M
507 31 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
507 374 M
73 374 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
507 331.125 M
73 331.125 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
507 288.25 M
73 288.25 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
507 245.375 M
73 245.375 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
507 202.5 M
73 202.5 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
507 159.625 M
73 159.625 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
507 116.75 M
73 116.75 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
507 73.875 M
73 73.875 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.873 GC
1 LJ
0.667 LW
N
507 31 M
73 31 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
73 374 M
507 374 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
73 374 M
73 369.66 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
127.25 374 M
127.25 369.66 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
181.5 374 M
181.5 369.66 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
235.75 374 M
235.75 369.66 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
290 374 M
290 369.66 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
344.25 374 M
344.25 369.66 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
398.5 374 M
398.5 369.66 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
452.75 374 M
452.75 369.66 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
507 374 M
507 369.66 L
S
GR
GS
[0.75 0 0 0.75 54.75001 284.50001] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-9.5 14 moveto 
1 -1 scale
(0.3) t 
GR
GR
GS
[0.75 0 0 0.75 95.4375 284.50001] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-9.5 14 moveto 
1 -1 scale
(0.4) t 
GR
GR
GS
[0.75 0 0 0.75 136.125 284.50001] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-9.5 14 moveto 
1 -1 scale
(0.5) t 
GR
GR
GS
[0.75 0 0 0.75 176.81251 284.50001] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-9.5 14 moveto 
1 -1 scale
(0.6) t 
GR
GR
GS
[0.75 0 0 0.75 217.5 284.50001] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-9.5 14 moveto 
1 -1 scale
(0.7) t 
GR
GR
GS
[0.75 0 0 0.75 258.1875 284.50001] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-9.5 14 moveto 
1 -1 scale
(0.8) t 
GR
GR
GS
[0.75 0 0 0.75 298.875 284.50001] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-9.5 14 moveto 
1 -1 scale
(0.9) t 
GR
GR
GS
[0.75 0 0 0.75 339.5625 284.50001] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-4 14 moveto 
1 -1 scale
(1) t 
GR
GR
GS
[0.75 0 0 0.75 380.25 284.50001] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-9.5 14 moveto 
1 -1 scale
(1.1) t 
GR
GR
GS
[0.75 0 0 0.75 217.50016 298.24999] CT
0.149 GC
/Helvetica 14.667 F
GS
[1 0 0 1 0 0] CT
-63 15 moveto 
1 -1 scale
(Displacement [mm]) t 
GR
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
73 374 M
73 31 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
73 374 M
77.34 374 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
73 331.125 M
77.34 331.125 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
73 288.25 M
77.34 288.25 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
73 245.375 M
77.34 245.375 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
73 202.5 M
77.34 202.5 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
73 159.625 M
77.34 159.625 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
73 116.75 M
77.34 116.75 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
73 73.875 M
77.34 73.875 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
2 setlinecap
1 LJ
0.667 LW
N
73 31 M
77.34 31 L
S
GR
GS
[0.75 0 0 0.75 50.75 280.5] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-23 5.5 moveto 
1 -1 scale
(-0.5) t 
GR
GR
GS
[0.75 0 0 0.75 50.75 248.34375] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-8 5.5 moveto 
1 -1 scale
(0) t 
GR
GR
GS
[0.75 0 0 0.75 50.75 216.1875] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-19 5.5 moveto 
1 -1 scale
(0.5) t 
GR
GR
GS
[0.75 0 0 0.75 50.75 184.03125] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-8 5.5 moveto 
1 -1 scale
(1) t 
GR
GR
GS
[0.75 0 0 0.75 50.75 151.875] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-19 5.5 moveto 
1 -1 scale
(1.5) t 
GR
GR
GS
[0.75 0 0 0.75 50.75 119.71875] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-8 5.5 moveto 
1 -1 scale
(2) t 
GR
GR
GS
[0.75 0 0 0.75 50.75 87.5625] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-19 5.5 moveto 
1 -1 scale
(2.5) t 
GR
GR
GS
[0.75 0 0 0.75 50.75 55.40625] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-8 5.5 moveto 
1 -1 scale
(3) t 
GR
GR
GS
[0.75 0 0 0.75 50.75 23.25] CT
0.149 GC
/Helvetica 13.333 F
GS
[1 0 0 1 0 0] CT
-19 5.5 moveto 
1 -1 scale
(3.5) t 
GR
GR
GS
[0 -0.75 0.75 0 30.50001 151.87487] CT
0.149 GC
/Helvetica 14.667 F
GS
[1 0 0 1 0 0] CT
-30.5 -4 moveto 
1 -1 scale
(Force [N]) t 
GR
GR
GS
[0.75 0 0 0.75 217.50021 21.1875] CT
/Helvetica-Bold 14.667 F
GS
[1 0 0 1 0 0] CT
-209.5 -4 moveto 
1 -1 scale
(Force-Displacement Diagram: Progressive vs. Linear Spring) t 
GR
GR
GS
[0.75 0 0 0.75 368.04378 43.18687] CT
0 0 1 RC
N
0 -3.667 M
2.025 -3.667 3.667 -2.025 3.667 0 C
3.667 0 L
3.667 2.025 2.025 3.667 0 3.667 C
-2.025 3.667 -3.667 2.025 -3.667 0 C
-3.667 -2.025 -2.025 -3.667 0 -3.667 C
cp
0 -4.333 M
-2.393 -4.333 -4.333 -2.393 -4.333 0 C
-4.333 2.393 -2.393 4.333 0 4.333 C
2.393 4.333 4.333 2.393 4.333 0 C
4.333 0 L
4.333 -2.393 2.393 -4.333 0 -4.333 C
cp
f
GR
GS
[0.75 0 0 0.75 335.49376 98.49562] CT
0 0 1 RC
N
/f-862814258{0 -3.667 M
2.025 -3.667 3.667 -2.025 3.667 0 C
3.667 0 L
3.667 2.025 2.025 3.667 0 3.667 C
-2.025 3.667 -3.667 2.025 -3.667 0 C
-3.667 -2.025 -2.025 -3.667 0 -3.667 C
cp
0 -4.333 M
-2.393 -4.333 -4.333 -2.393 -4.333 0 C
-4.333 2.393 -2.393 4.333 0 4.333 C
2.393 4.333 4.333 2.393 4.333 0 C
4.333 0 L
4.333 -2.393 2.393 -4.333 0 -4.333 C
cp}def
f-862814258
f
GR
GS
[0.75 0 0 0.75 311.08125 118.4325] CT
0 0 1 RC
N
f-862814258
f
GR
GS
[0.75 0 0 0.75 290.7375 125.50687] CT
0 0 1 RC
N
f-862814258
f
GR
GS
[0.75 0 0 0.75 266.325 135.15375] CT
0 0 1 RC
N
f-862814258
f
GR
GS
[0.75 0 0 0.75 241.91249 158.94937] CT
0 0 1 RC
N
f-862814258
f
GR
GS
[0.75 0 0 0.75 213.43126 175.67062] CT
0 0 1 RC
N
f-862814258
f
GR
GS
[0.75 0 0 0.75 184.95 190.4625] CT
0 0 1 RC
N
f-862814258
f
GR
GS
[0.75 0 0 0.75 168.675 200.75251] CT
0 0 1 RC
N
f-862814258
f
GR
GS
[0.75 0 0 0.75 123.91875 220.04624] CT
0 0 1 RC
N
f-862814258
f
GR
GS
[0.75 0 0 0.75 71.025 229.69313] CT
0 0 1 RC
N
f-862814258
f
GR
GS
[0.75 0 0 0.75 0 0] CT
1 0 0 RC
1 LJ
2 LW
N
94.7 310.05 M
98.7 308.739 L
102.701 307.428 L
106.701 306.118 L
110.701 304.806 L
114.701 303.494 L
118.702 302.179 L
122.702 300.861 L
126.702 299.539 L
130.702 298.213 L
134.703 296.882 L
138.703 295.545 L
142.703 294.201 L
146.703 292.85 L
150.704 291.491 L
154.704 290.124 L
158.704 288.746 L
162.704 287.359 L
166.705 285.96 L
170.705 284.549 L
174.705 283.126 L
178.705 281.69 L
182.706 280.24 L
186.706 278.775 L
190.706 277.295 L
194.706 275.799 L
198.707 274.285 L
202.707 272.754 L
206.707 271.205 L
210.707 269.636 L
214.708 268.048 L
218.708 266.439 L
222.708 264.809 L
226.708 263.157 L
230.709 261.482 L
234.709 259.783 L
238.709 258.06 L
242.709 256.312 L
246.71 254.538 L
250.71 252.738 L
254.71 250.911 L
258.71 249.056 L
262.711 247.172 L
266.711 245.258 L
270.711 243.315 L
274.711 241.34 L
278.712 239.334 L
282.712 237.296 L
286.712 235.224 L
290.712 233.119 L
294.713 230.979 L
298.713 228.804 L
302.713 226.592 L
306.713 224.344 L
310.714 222.059 L
314.714 219.735 L
318.714 217.372 L
322.714 214.97 L
326.715 212.527 L
330.715 210.042 L
334.715 207.516 L
338.715 204.947 L
342.716 202.335 L
346.716 199.679 L
350.716 196.978 L
354.716 194.231 L
358.717 191.438 L
362.717 188.598 L
366.717 185.71 L
370.717 182.773 L
374.718 179.787 L
378.718 176.751 L
382.718 173.664 L
386.718 170.526 L
390.719 167.336 L
394.719 164.093 L
398.719 160.795 L
402.719 157.444 L
406.72 154.037 L
410.72 150.575 L
414.72 147.055 L
418.72 143.479 L
422.721 139.844 L
426.721 136.15 L
430.721 132.397 L
434.721 128.584 L
438.722 124.709 L
442.722 120.773 L
446.722 116.774 L
450.722 112.712 L
454.723 108.585 L
458.723 104.394 L
462.723 100.138 L
466.723 95.815 L
470.724 91.426 L
474.724 86.968 L
478.724 82.443 L
482.725 77.848 L
486.725 73.183 L
490.725 68.448 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0 1 0 RC
[8 8] 0 setdash
2 LJ
2 LW
N
94.7 335.401 M
98.7 333.014 L
102.701 330.627 L
106.701 328.24 L
110.701 325.853 L
114.701 323.466 L
118.702 321.079 L
122.702 318.692 L
126.702 316.305 L
130.702 313.918 L
134.703 311.531 L
138.703 309.144 L
142.703 306.757 L
146.703 304.37 L
150.704 301.983 L
154.704 299.596 L
158.704 297.208 L
162.704 294.821 L
166.705 292.434 L
170.705 290.047 L
174.705 287.66 L
178.705 285.273 L
182.706 282.886 L
186.706 280.499 L
190.706 278.112 L
194.706 275.725 L
198.707 273.338 L
202.707 270.951 L
206.707 268.564 L
210.707 266.177 L
214.708 263.79 L
218.708 261.403 L
222.708 259.016 L
226.708 256.629 L
230.709 254.242 L
234.709 251.855 L
238.709 249.468 L
242.709 247.081 L
246.71 244.694 L
250.71 242.307 L
254.71 239.92 L
258.71 237.533 L
262.711 235.146 L
266.711 232.758 L
270.711 230.371 L
274.711 227.984 L
278.712 225.597 L
282.712 223.21 L
286.712 220.823 L
290.712 218.436 L
294.713 216.049 L
298.713 213.662 L
302.713 211.275 L
306.713 208.888 L
310.714 206.501 L
314.714 204.114 L
318.714 201.727 L
322.714 199.34 L
326.715 196.953 L
330.715 194.566 L
334.715 192.179 L
338.715 189.792 L
342.716 187.405 L
346.716 185.018 L
350.716 182.631 L
354.716 180.244 L
358.717 177.857 L
362.717 175.47 L
366.717 173.083 L
370.717 170.696 L
374.718 168.308 L
378.718 165.921 L
382.718 163.534 L
386.718 161.147 L
390.719 158.76 L
394.719 156.373 L
398.719 153.986 L
402.719 151.599 L
406.72 149.212 L
410.72 146.825 L
414.72 144.438 L
418.72 142.051 L
422.721 139.664 L
426.721 137.277 L
430.721 134.89 L
434.721 132.503 L
438.722 130.116 L
442.722 127.729 L
446.722 125.342 L
450.722 122.955 L
454.723 120.568 L
458.723 118.181 L
462.723 115.794 L
466.723 113.407 L
470.724 111.02 L
474.724 108.633 L
478.724 106.246 L
482.725 103.858 L
486.725 101.471 L
490.725 99.084 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
1 GC
N
496 95 M
496 42 L
331 42 L
331 95 L
cp
f
GR
GS
[0.75 0 0 0.75 283.5 39] CT
/Helvetica 12 F
GS
[1 0 0 1 0 0] CT
0 5 moveto 
1 -1 scale
(Measured Data) t 
GR
GR
GS
[0.75 0 0 0.75 266.25 39] CT
0 0 1 RC
N
f-862814258
f
GR
GS
[0.75 0 0 0.75 283.5 51.375] CT
/Helvetica 12 F
GS
[1 0 0 1 0 0] CT
0 5 moveto 
1 -1 scale
(Non-linear Fit) t 
GR
GR
GS
[0.75 0 0 0.75 0 0] CT
1 0 0 RC
1 LJ
2 LW
N
335 68.5 M
375 68.5 L
S
GR
GS
[0.75 0 0 0.75 283.5 63.75] CT
/Helvetica 12 F
GS
[1 0 0 1 0 0] CT
0 5 moveto 
1 -1 scale
(Linear Approximation) t 
GR
GR
GS
[0.75 0 0 0.75 0 0] CT
0 1 0 RC
[8 8] 0 setdash
2 LJ
2 LW
N
335 85 M
375 85 L
S
GR
GS
[0.75 0 0 0.75 0 0] CT
0.149 GC
10.0 ML
0.667 LW
N
331 95 M
331 42 L
496 42 L
496 95 L
cp
S
GR
%%Trailer
%%Pages: 1
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 1458 3118 a Fd(Figure)22
b(3.1)p 0 TeXcolorgray 24 w Fg(Spr)q(ingT)-11 b(est)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 150 3252
a
SDict begin H.S end
 150 3252 a 150 3252 a
SDict begin 13.6 H.A end
 150 3252 a 150 3252 a
SDict begin [/View [/XYZ H.V]/Dest (section.3.3) cvn /DEST pdfmark
end
 150 3252
a 0 TeXcolorgray 206 x Fh(3.3)61 b(Limitations)35 b(and)f(Identi\002ed)
g(Challeng)q(es)p 0 TeXcolorgray 0 TeXcolorgray 1855
5816 a Fg(5)p 0 TeXcolorgray eop end
%%Page: 6 11
TeXDict begin 6 10 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 150 286
a
SDict begin H.S end
 150 286 a 150 286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.4) cvn /DEST pdfmark end
 150 286 a 0
TeXcolorgray 145 901 a Fj(4)86 b(Modify)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1855 5816 a Fg(6)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 7 12
TeXDict begin 7 11 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.7) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 150 286
a
SDict begin H.S end
 150 286 a 150 286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.5) cvn /DEST pdfmark end
 150 286 a 0
TeXcolorgray 615 x Fj(5)86 b(Ev)m(aluation)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1855 5816 a Fg(7)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 5 13
TeXDict begin 5 12 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.V) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 150 286
a
SDict begin H.S end
 150 286 a 150 286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (chapter.6) cvn /DEST pdfmark end
 150 286 a 0
TeXcolorgray 615 x Fj(6)86 b(Conc)m(lusion)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1850 5816 a Fg(V)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 6 14
TeXDict begin 6 13 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.VI) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 150 286
a
SDict begin H.S end
 150 286 a 150 286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (chapter*.9) cvn /DEST pdfmark end
 150 286 a 0
TeXcolorgray 615 x Fj(Bib)n(liograph)m(y)p 0 TeXcolorgray
150 1134 a
SDict begin H.S end
 150 1134 a 150 1134 a
SDict begin 13.6 H.A end
 150 1134 a 150 1134
a
SDict begin [/View [/XYZ H.V]/Dest (cite.alzint_dementia_statistics)
cvn /DEST pdfmark end
 150 1134 a 0 TeXcolorgray 201 1265 a Fg([1])p 0 TeXcolorgray
45 w(Alzheimer')-5 b(s)270 b(Disease)e(Inter)r(national,)329
b(\223Dementia)268 b(statistics)o(,)-9 b(\224)347 1378
y(2024,)337 b(accessed:)534 b(2025-04-22.)273 b([Online].)j(A)l(v)n
(ailab)n(le:)p 0 0.28627 0.51373 TeXcolorrgb 347 1511
a
SDict begin H.S end
 347 1511 a 0 0.28627 0.51373 TeXcolorrgb -20 x Fg(https://www)-5
b(.alzint.org/about/dementia-)t(f)m(acts-)t(\002gures/dementia-)t
(statistics/)p 0 0.28627 0.51373 TeXcolorrgb 3196 1424
a
SDict begin H.R end
 3196 1424 a 3196 1491 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.alzint.org/about/dementia-facts-figures/dementia-statistics/)>>/Subtype
/Link H.B /ANN pdfmark end
 3196 1491 a 0 TeXcolorgray
150 1511 a
SDict begin H.S end
 150 1511 a 150 1511 a
SDict begin 13.6 H.A end
 150 1511 a 150 1511
a
SDict begin [/View [/XYZ H.V]/Dest (cite.who_dementia_factsheet) cvn
/DEST pdfmark end
 150 1511 a 0 TeXcolorgray 201 1660 a Fg([2])p 0 TeXcolorgray
45 w(W)m(or)q(ld)25 b(Health)f(Organization,)g(\223Dementia)f(\226)i(f)
m(act)h(sheet,)-9 b(\224)25 b(2024,)f(accessed:)31 b(2025-04-22.)347
1773 y([Online].)25 b(A)l(v)n(ailab)n(le:)p 0 0.28627 0.51373
TeXcolorrgb 1129 1792 a
SDict begin H.S end
 1129 1792 a 0 0.28627 0.51373
TeXcolorrgb -19 x Fg(https://www)-5 b(.who)l(.int/ne)n(ws-)t(room/f)m
(act-)t(sheets/detail/dementia)p 0 0.28627 0.51373 TeXcolorrgb
3493 1706 a
SDict begin H.R end
 3493 1706 a 3493 1773 a
SDict begin [/H /I/Border [0 0 0]BorderArrayPatch/Color [0 1 1]/Action
<</Subtype/URI/URI(https://www.who.int/news-room/fact-sheets/detail/dementia)>>/Subtype
/Link H.B /ANN pdfmark end
 3493 1773 a 0 TeXcolorgray
150 1792 a
SDict begin H.S end
 150 1792 a 150 1792 a
SDict begin 13.6 H.A end
 150 1792 a 150 1792
a
SDict begin [/View [/XYZ H.V]/Dest (cite.Zucchella.2018) cvn /DEST
pdfmark end
 150 1792 a 0 TeXcolorgray 201 1942 a Fg([3])p 0 TeXcolorgray
45 w(C)m(.)37 b(Zucchella,)j(E.)c(Sinf)m(or)q(iani,)k(S)n(.)d(T)-11
b(amb)n(ur)q(in,)39 b(A.)e(F)m(eder)q(ico)l(,)j(E.)d(Manto)o(v)n(ani,)h
(S)n(.)f(Ber)r(nini,)347 2055 y(R.)21 b(Casale)o(,)f(and)g(M.)h(Bar)t
(tolo)l(,)g(\223The)f(Multidisciplinar)s(y)h(Approach)e(to)h
(Alzheimer')-5 b(s)21 b(Disease)347 2168 y(and)27 b(Dementia.)f(A)i
(Narr)o(ativ)n(e)g(Re)m(vie)n(w)g(of)g(Non-Phar)r(macological)d(T)-11
b(reatment,)i(\224)28 b Fe(F)l(rontiers)347 2281 y(in)d(neurology)p
Fg(,)f(v)n(ol.)h(9,)g(p)m(.)g(1058,)f(2018.)150 2301
y
SDict begin H.S end
 150 2301 a 150 2301 a
SDict begin 13.6 H.A end
 150 2301 a 150 2301 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Mably.2018) cvn /DEST pdfmark
end
 150 2301
a 0 TeXcolorgray 201 2450 a Fg([4])p 0 TeXcolorgray 45
w(A.)k(J)m(.)g(Mab)n(ly)g(and)e(L.)i(L.)f(Colgin,)h(\223Gamma)e
(oscillations)i(in)g(cognitiv)n(e)f(disorders,)-9 b(\224)29
b Fe(Current)347 2563 y(opinion)23 b(in)i(neurobiology)p
Fg(,)e(v)n(ol.)j(52,)f(pp)m(.)f(182\226187,)e(2018.)150
2583 y
SDict begin H.S end
 150 2583 a 150 2583 a
SDict begin 13.6 H.A end
 150 2583 a 150 2583 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Iaccarino.2016) cvn /DEST
pdfmark end
 150
2583 a 0 TeXcolorgray 201 2733 a Fg([5])p 0 TeXcolorgray
45 w(H.)k(F)-14 b(.)27 b(Iaccar)q(ino)l(,)g(A.)g(C)m(.)f(Singer)-5
b(,)26 b(A.)h(J)m(.)g(Mar)t(torell,)f(A.)g(Rudenk)n(o)l(,)g(F)-14
b(.)26 b(Gao)l(,)g(T)-11 b(.)26 b(Z.)h(Gillingham,)347
2845 y(H.)h(Math)m(ys)o(,)i(J)m(.)f(Seo)l(,)g(O)l(.)g(Kr)q(itskiy)-9
b(,)31 b(F)-14 b(.)29 b(Abdurrob)l(,)e(C)m(.)i(Adaikkan,)f(R.)h(G.)f
(Canter)-5 b(,)29 b(R.)f(Rueda,)347 2958 y(E.)21 b(N.)h(Bro)o(wn,)f(E.)
g(S)n(.)h(Bo)m(yden,)f(and)f(L.-H.)h(Tsai,)h(\223Gamma)e(frequency)h
(entr)o(ainment)f(atten)o(u-)347 3071 y(ates)h(am)o(yloid)e(load)h(and)
g(modi\002es)g(microglia,)-9 b(\224)22 b Fe(Nature)p
Fg(,)f(v)n(ol.)g(540,)f(no)l(.)h(7632,)f(pp)m(.)g(230\226235,)347
3184 y(2016.)150 3186 y
SDict begin H.S end
 150 3186 a 150 3186 a
SDict begin 13.6 H.A end
 150 3186
a 150 3186 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Martorell.2019) cvn /DEST
pdfmark end
 150 3186 a 0 TeXcolorgray 201 3354 a Fg([6])p
0 TeXcolorgray 45 w(A.)28 b(J)m(.)i(Mar)t(torell,)e(A.)g(L.)h(P)l
(aulson,)f(H.-J)m(.)h(Suk,)g(F)-14 b(.)29 b(Abdurrob)l(,)f(G.)g(T)-11
b(.)28 b(Dr)q(ummond,)f(W)-7 b(.)29 b(Guan,)345 3467
y(J)m(.)38 b(Z.)f(Y)-13 b(oung,)39 b(D)-6 b(.)36 b(N.-W)-7
b(.)38 b(Kim,)i(O)l(.)d(Kr)q(itskiy)-9 b(,)43 b(S)n(.)37
b(J)m(.)h(Bar)q(k)n(er)-5 b(,)42 b(V)-11 b(.)36 b(Mangena,)i(S)n(.)f
(M.)g(Pr)q(ince)o(,)347 3579 y(E.)25 b(N.)g(Bro)o(wn,)f(K.)h(Chung,)e
(E.)i(S)n(.)g(Bo)m(yden,)f(A.)h(C)m(.)g(Singer)-5 b(,)25
b(and)e(L.-H.)i(Tsai,)g(\223Multi-sensor)s(y)347 3692
y(Gamma)e(Stim)o(ulation)h(Amelior)o(ates)g(Alzheimer')-5
b(s-Associated)25 b(P)l(athology)f(and)f(Impro)o(v)n(es)347
3805 y(Cognition,)-9 b(\224)24 b Fe(Cell)p Fg(,)h(v)n(ol.)g(177,)g(no)l
(.)g(2,)g(pp)m(.)f(256\226271.e22,)d(2019.)150 3825 y
SDict begin H.S end

150 3825 a 150 3825 a
SDict begin 13.6 H.A end
 150 3825 a 150 3825 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Campbell.2022) cvn /DEST pdfmark
end
 150 3825
a 0 TeXcolorgray 201 3975 a Fg([7])p 0 TeXcolorgray 45
w(E.)h(A.)f(Campbell,)f(J)m(.)j(Kantor)-5 b(,)22 b(L.)f(Kantoro)o
(v\341,)g(Z.)g(Sv)n(obodo)o(v\341,)f(and)g(T)-11 b(.)21
b(W)m(osch,)i(\223T)-11 b(actile)22 b(Lo)o(w)347 4088
y(F)l(requency)31 b(Vibr)o(ation)h(in)g(Dementia)f(Management:)43
b(A)33 b(Scoping)e(Re)m(vie)n(w,)-9 b(\224)35 b Fe(F)l(rontiers)d(in)
347 4200 y(psychology)p Fg(,)25 b(v)n(ol.)h(13,)e(p)m(.)h(854794,)e
(2022.)150 4221 y
SDict begin H.S end
 150 4221 a 150 4221 a
SDict begin 13.6 H.A end
 150 4221 a 150
4221 a
SDict begin [/View [/XYZ H.V]/Dest (cite.ClementsCortes.2016) cvn /DEST
pdfmark end
 150 4221 a 0 TeXcolorgray 201 4370 a Fg([8])p
0 TeXcolorgray 45 w(A.)33 b(Clements-Cor)t(tes)o(,)f(H.)h(Ahonen,)f(M.)
g(Ev)n(ans)o(,)i(M.)e(F)l(reedman,)g(and)f(L.)i(Bar)t(tel,)g(\223Shor)t
(t-)344 4483 y(T)-11 b(er)r(m)40 b(Eff)m(ects)i(of)f(Rh)m(ythmic)g
(Sensor)s(y)f(Stim)o(ulation)f(in)i(Alzheimer')-5 b(s)41
b(Disease:)61 b(An)40 b(Ex-)347 4596 y(plor)o(ator)s(y)d(Pilot)f
(Study,)-9 b(\224)40 b Fe(Jour)r(nal)d(of)f(Alzheimer')-5
b(s)38 b(disease)e(:)55 b(J)n(AD)p Fg(,)37 b(v)n(ol.)g(52,)j(no)l(.)c
(2,)k(pp)m(.)347 4709 y(651\226660,)22 b(2016.)150 4722
y
SDict begin H.S end
 150 4722 a 150 4722 a
SDict begin 13.6 H.A end
 150 4722 a 150 4722 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Heesterbeek.2019) cvn /DEST
pdfmark end
 150 4722
a 0 TeXcolorgray 201 4878 a Fg([9])p 0 TeXcolorgray 45
w(M.)36 b(Heesterbeek,)i(E.)e(A.)h(v)n(an)e(der)h(Zee,)i(and)d(M.)h(J)m
(.)i(G.)e(v)n(an)g(Heuv)n(elen,)h(\223F)m(easibility)g(of)344
4991 y(Three)24 b(No)o(v)n(el)f(F)m(or)r(ms)i(of)g(P)l(assiv)n(e)h(Ex)m
(ercise)f(in)g(a)f(Multisensor)s(y)h(En)n(vironment)f(in)g(V)-6
b(ulner)o(a-)347 5104 y(b)n(le)27 b(Institutionaliz)o(ed)g(Older)f
(Adults)h(with)g(Dementia,)-9 b(\224)27 b Fe(Jour)r(nal)f(of)i
(Alzheimer')-5 b(s)27 b(disease)g(:)347 5217 y(J)n(AD)p
Fg(,)f(v)n(ol.)f(70,)g(no)l(.)g(3,)g(pp)m(.)f(681\226690,)f(2019.)p
0 TeXcolorgray 0 TeXcolorgray 1837 5816 a(VI)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 7 15
TeXDict begin 7 14 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.VII) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 150 82 a Fg(Bib)n(liog)o(r)o(aph)m(y)p
150 120 3461 4 v 0 TeXcolorgray 150 286 a
SDict begin H.S end
 150 286 a 150
286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Lam.2018) cvn /DEST pdfmark
end
 150 286 a 0 TeXcolorgray 91
x Fg([10])p 0 TeXcolorgray 45 w(F)-14 b(.)22 b(M.)f(H.)g(Lam,)h(L.)f
(R.)g(Liao)l(,)h(T)-11 b(.)21 b(C)m(.)h(Y)-13 b(.)21
b(Kw)o(ok,)h(and)e(M.)h(Y)-13 b(.)22 b(C)m(.)g(P)l(ang,)f(\223Eff)m
(ects)h(of)g(adding)d(whole-)347 490 y(body)h(vibr)o(ation)f(to)i
(routine)e(da)m(y)h(activity)i(prog)o(r)o(am)d(on)h(ph)m(ysical)h
(functioning)e(in)h(elder)q(ly)g(with)347 603 y(mild)26
b(or)g(moder)o(ate)e(dementia:)31 b(a)26 b(r)o(andomiz)o(ed)e
(controlled)h(tr)q(ial,)-9 b(\224)28 b Fe(Inter)r(national)d(jour)r
(nal)g(of)347 716 y(ger)q(iatr)q(ic)h(psychiatr)s(y)p
Fg(,)h(v)n(ol.)e(33,)g(no)l(.)g(1,)g(pp)m(.)f(21\22630,)g(2018.)150
736 y
SDict begin H.S end
 150 736 a 150 736 a
SDict begin 13.6 H.A end
 150 736 a 150 736 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Clair.1993) cvn /DEST pdfmark
end
 150 736
a 0 TeXcolorgray 149 x Fg([11])p 0 TeXcolorgray 45 w(A.)e(A.)h(Clair)f
(and)f(B)n(.)i(Ber)r(nstein,)f(\223The)f(Pref)m(erence)h(f)m(or)h
(Vibrotactile)f(V)-7 b(ersus)22 b(A)m(uditor)s(y)g(Stim-)347
998 y(uli)34 b(in)f(Se)m(v)n(erely)g(Reg)o(ressed)f(P)-5
b(ersons)34 b(with)f(Dementia)f(of)h(the)g(Alzheimer')-5
b(s)34 b(T)-11 b(ype)33 b(Com-)347 1111 y(pared)19 b(to)i(Those)f(with)
g(Dementia)f(due)h(to)g(Alcohol)g(Ab)n(use,)-9 b(\224)21
b Fe(Music)h(Ther)o(ap)m(y)d(P)-5 b(erspectiv)n(es)p
Fg(,)345 1224 y(v)n(ol.)25 b(11,)g(no)l(.)g(1,)g(pp)m(.)f(24\22627,)g
(1993.)150 1243 y
SDict begin H.S end
 150 1243 a 150 1243 a
SDict begin 13.6 H.A end
 150 1243 a 150
1243 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Kim.2018) cvn /DEST pdfmark
end
 150 1243 a 0 TeXcolorgray 150 x Fg([12])p 0 TeXcolorgray
45 w(K.-H.)e(Kim)f(and)f(H.-B)n(.)i(Lee)o(,)f(\223The)f(eff)m(ects)j
(of)e(whole)f(body)h(vibr)o(ation)g(e)m(x)m(ercise)h(inter)s(v)n
(ention)347 1506 y(on)32 b(electroencephalog)o(r)o(am)d(activ)n(ation)k
(and)e(cognitiv)n(e)h(function)g(in)h(w)o(omen)e(with)h(senile)347
1619 y(dementia,)-9 b(\224)24 b Fe(Jour)r(nal)g(of)h(e)m(x)m(ercise)i
(rehabilitation)p Fg(,)d(v)n(ol.)h(14,)g(no)l(.)g(4,)g(pp)m(.)f
(586\226591,)f(2018.)150 1638 y
SDict begin H.S end
 150 1638 a 150 1638 a
SDict begin 13.6 H.A end

150 1638 a 150 1638 a
SDict begin [/View [/XYZ H.V]/Dest (cite.ClementsCortes.2017) cvn /DEST
pdfmark end
 150 1638 a 0 TeXcolorgray 150 x
Fg([13])p 0 TeXcolorgray 45 w(A.)59 b(Clements-Cor)t(tes)o(,)66
b(L.)59 b(Bar)t(tel,)67 b(H.)59 b(Ahonen,)65 b(M.)59
b(F)l(reedman,)65 b(M.)59 b(Ev)n(ans)o(,)67 b(and)347
1901 y(D)-6 b(.)30 b(T)-11 b(ang-W)l(ai,)31 b(\223Can)f(Rh)m(ythmic)g
(Sensor)s(y)g(Stim)o(ulation)f(Decrease)h(Cognitiv)n(e)f(Decline)h(in)
344 2014 y(Alzheimer')-5 b(s)30 b(Disease?:)40 b(A)30
b(Clinical)f(Case)h(Study,)-9 b(\224)31 b Fe(Music)f(and)f(Medicine)p
Fg(,)h(v)n(ol.)g(9,)h(no)l(.)e(3,)347 2127 y(p)m(.)c(174,)f(2017.)150
2146 y
SDict begin H.S end
 150 2146 a 150 2146 a
SDict begin 13.6 H.A end
 150 2146 a 150 2146 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Mercado.2006) cvn /DEST pdfmark
end
 150
2146 a 0 TeXcolorgray 150 x Fg([14])p 0 TeXcolorgray
45 w(C)m(.)k(Mercado)e(and)g(E.)i(Mercado)l(,)g(\223A)f(Prog)o(r)o(am)f
(Using)h(En)n(vironmental)f(Manipulation,)g(Mu-)347 2409
y(sic)35 b(Ther)o(ap)m(y)e(Activities)o(,)38 b(and)33
b(the)h(Somatron\(C\))e(Vibroacoustic)i(Chair)f(T)-11
b(o)34 b(Reduce)e(Ag-)347 2522 y(itation)i(Beha)n(viors)f(of)h(Nursing)
f(Home)g(Residents)g(with)h(Psychiatr)q(ic)i(Disorders)o(,)-9
b(\224)36 b Fe(Music)347 2635 y(Ther)o(ap)m(y)24 b(P)-5
b(erspectiv)n(es)p Fg(,)26 b(v)n(ol.)g(24,)e(no)l(.)h(1,)g(pp)m(.)g
(30\22638,)e(2006.)150 2654 y
SDict begin H.S end
 150 2654 a 150 2654 a
SDict begin 13.6 H.A end
 150
2654 a 150 2654 a
SDict begin [/View [/XYZ H.V]/Dest (cite.ClementsCortes.2017b) cvn
/DEST pdfmark end
 150 2654 a 0 TeXcolorgray 150 x Fg([15])p
0 TeXcolorgray 45 w(A.)35 b(Clements-Cor)t(tes)o(,)h(L.)f(Bar)t(tel,)i
(H.)e(Ahonen,)g(and)f(M.)h(F)l(reedman,)g(\223The)f(P)-5
b(otential)35 b(of)347 2917 y(Rh)m(ythmic)29 b(Sensor)s(y)f(Stim)o
(ulation)f(T)-11 b(reatments)27 b(f)m(or)i(P)-5 b(ersons)29
b(with)f(Alzheimer')-5 b(s)29 b(Disease,)-9 b(\224)347
3030 y Fe(Music)26 b(and)e(Medicine)p Fg(,)g(v)n(ol.)h(9,)g(no)l(.)g
(3,)h(p)m(.)e(167,)h(2017.)150 3049 y
SDict begin H.S end
 150 3049 a 150
3049 a
SDict begin 13.6 H.A end
 150 3049 a 150 3049 a
SDict begin [/View [/XYZ H.V]/Dest (cite.ClementsCortes.2022) cvn /DEST
pdfmark end
 150 3049 a 0 TeXcolorgray
151 x Fg([16])p 0 TeXcolorgray 45 w(A.)g(Clements-Cor)t(tes)f(and)g(L.)
h(Bar)t(tel,)f(\223Long-T)-11 b(er)r(m)24 b(Multi-Sensor)s(y)g(Gamma)g
(Stim)o(ulation)347 3313 y(of)g(Dementia)e(P)l(atients:)30
b(A)24 b(Case)f(Ser)q(ies)h(Repor)t(t,)-9 b(\224)23 b
Fe(Inter)r(national)g(jour)r(nal)g(of)g(en)n(vironmen-)347
3425 y(tal)i(research)g(and)f(pub)n(lic)h(health)p Fg(,)f(v)n(ol.)i
(19,)e(no)l(.)h(23,)g(2022.)150 3445 y
SDict begin H.S end
 150 3445 a 150
3445 a
SDict begin 13.6 H.A end
 150 3445 a 150 3445 a
SDict begin [/View [/XYZ H.V]/Dest (cite.ReikoTutida.2014) cvn /DEST
pdfmark end
 150 3445 a 0 TeXcolorgray
150 x Fg([17])p 0 TeXcolorgray 45 w(Y)-13 b(.)34 b(K.)f(Reik)n(o)g(T)
-11 b(utida,)34 b(\223Lo)o(w-F)l(requency)-9 b(,)33 b(Whole)f(Body)g
(Vibr)o(ation)g(Induced)g(Neur)q(ite)h(Out-)347 3708
y(g)o(ro)o(wth)24 b(b)n(y)h(Pc12m3)e(Cells)j(with)e(Impaired)g(Ner)s(v)
n(e)g(Gro)o(wth)g(F)-5 b(actor-Induced)23 b(Neur)q(ite)i(Out-)347
3821 y(g)o(ro)o(wth,)-9 b(\224)24 b Fe(Jour)r(nal)h(of)g(No)o(v)n(el)f
(Ph)m(ysiother)o(apies)p Fg(,)h(v)n(ol.)g(05,)g(no)l(.)g(01,)f(2014.)
150 3841 y
SDict begin H.S end
 150 3841 a 150 3841 a
SDict begin 13.6 H.A end
 150 3841 a 150 3841
a
SDict begin [/View [/XYZ H.V]/Dest (cite.Guger.2012) cvn /DEST pdfmark
end
 150 3841 a 0 TeXcolorgray 149 x Fg([18])p 0 TeXcolorgray
45 w(C)m(.)31 b(Guger)-5 b(,)32 b(G.)f(Kr)o(ausz,)i(B)n(.)e(Z.)g
(Allison,)h(and)e(G.)h(Edlinger)-5 b(,)31 b(\223Compar)q(ison)f(of)h
(dr)s(y)g(and)e(gel)347 4103 y(based)j(electrodes)g(f)m(or)h(p300)e(br)
o(ain-computer)g(interf)m(aces,)-9 b(\224)35 b Fe(F)l(rontiers)e(in)f
(neuroscience)p Fg(,)345 4216 y(v)n(ol.)25 b(6,)g(p)m(.)g(60,)g(2012.)
150 4235 y
SDict begin H.S end
 150 4235 a 150 4235 a
SDict begin 13.6 H.A end
 150 4235 a 150 4235
a
SDict begin [/View [/XYZ H.V]/Dest (cite.Guger.2017) cvn /DEST pdfmark
end
 150 4235 a 0 TeXcolorgray 150 x Fg([19])p 0 TeXcolorgray
45 w(C)m(.)c(Guger)-5 b(,)21 b(R.)g(Spataro)l(,)g(B)n(.)g(Z.)g
(Allison,)h(A.)f(Heilinger)-5 b(,)21 b(R.)g(Or)t(tner)-5
b(,)22 b(W)-7 b(.)20 b(Cho)l(,)i(and)d(V)-11 b(.)21 b(La)f(Bella,)338
4498 y(\223Complete)35 b(Loc)n(k)n(ed-in)i(and)e(Loc)n(k)n(ed-in)i(P)l
(atients:)54 b(Command)35 b(F)m(ollo)o(wing)g(Assessment)347
4611 y(and)30 b(Comm)o(unication)g(with)h(Vibro-T)-11
b(actile)31 b(P300)f(and)h(Motor)g(Imager)s(y)g(Br)o(ain-Computer)347
4724 y(Interf)m(ace)25 b(T)-11 b(ools,)i(\224)25 b Fe(F)l(rontiers)g
(in)g(neuroscience)p Fg(,)f(v)n(ol.)i(11,)f(p)m(.)f(251,)h(2017.)150
4743 y
SDict begin H.S end
 150 4743 a 150 4743 a
SDict begin 13.6 H.A end
 150 4743 a 150 4743 a
SDict begin [/View [/XYZ H.V]/Dest (cite.SebastianRomagosa.2020) cvn
/DEST pdfmark end
 150
4743 a 0 TeXcolorgray 150 x Fg([20])p 0 TeXcolorgray
45 w(M.)59 b(Sebasti\341n-Romagosa,)k(E.)c(Udina,)65
b(R.)59 b(Or)t(tner)-5 b(,)67 b(J)m(.)60 b(Dinar\350s-F)m(err)o(an,)65
b(W)-7 b(.)59 b(Cho)l(,)347 5006 y(N.)26 b(Muro)o(v)n(ec)o(,)f(C)m(.)h
(Matencio-P)-5 b(er)o(alba,)24 b(S)n(.)i(Sieghar)t(tsleitner)-5
b(,)25 b(B)n(.)h(Z.)f(Allison,)h(and)f(C)m(.)h(Guger)-5
b(,)338 5119 y(\223EEG)27 b(Biomar)q(k)n(ers)h(Related)e(With)h(the)g
(Functional)f(State)h(of)g(Strok)n(e)h(P)l(atients)o(,)-9
b(\224)28 b Fe(F)l(rontiers)347 5232 y(in)d(neuroscience)p
Fg(,)f(v)n(ol.)i(14,)e(p)m(.)h(582,)f(2020.)p 0 TeXcolorgray
1823 5816 a(VII)p 0 TeXcolorgray eop end
%%Page: 8 16
TeXDict begin 8 15 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.VIII) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 150 82 a Fg(Bib)n(liog)o(r)o(aph)m(y)p
150 120 3461 4 v 0 TeXcolorgray 150 286 a
SDict begin H.S end
 150 286 a 150
286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (cite.Xu.2022) cvn /DEST pdfmark
end
 150 286 a 0 TeXcolorgray 91
x Fg([21])p 0 TeXcolorgray 45 w(R.)20 b(Xu,)g(R.)g(Spataro)l(,)g(B)n(.)
g(Z.)g(Allison,)h(and)e(C)m(.)h(Guger)-5 b(,)20 b(\223Br)o
(ain-Computer)e(Interf)m(aces)i(in)g(Acute)347 490 y(and)29
b(Subacute)g(Disorders)h(of)g(Consciousness,)-9 b(\224)31
b Fe(Jour)r(nal)f(of)g(clinical)h(neuroph)m(ysiology)e(:)347
603 y(of\002cial)22 b(pub)n(lication)e(of)g(the)h(Amer)q(ican)f
(Electroencephalog)o(r)o(aphic)e(Society)p Fg(,)k(v)n(ol.)f(39,)h(no)l
(.)e(1,)347 716 y(pp)m(.)25 b(32\22639,)e(2022.)p 0 TeXcolorgray
1811 5816 a(VIII)p 0 TeXcolorgray eop end
%%Page: 9 17
TeXDict begin 9 16 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142 -8 a
SDict begin [/View [/XYZ H.V]/Dest (page.IX) cvn /DEST pdfmark end
 142 -8 a
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 150 286
a
SDict begin H.S end
 150 286 a 150 286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (chapter*.10) cvn /DEST pdfmark
end
 150 286 a 0
TeXcolorgray 615 x Fj(List)48 b(of)g(Figures)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1837 5816 a Fg(IX)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 10 18
TeXDict begin 10 17 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray 142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142
-8 a
SDict begin [/View [/XYZ H.V]/Dest (page.X) cvn /DEST pdfmark end
 142 -8 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
150 286 a
SDict begin H.S end
 150 286 a 150 286 a
SDict begin 13.6 H.A end
 150 286 a 150 286 a
SDict begin [/View [/XYZ H.V]/Dest (chapter*.11) cvn /DEST pdfmark
end
 150
286 a 0 TeXcolorgray 615 x Fj(List)48 b(of)g(T)-14 b(ab)n(les)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1850 5816
a Fg(X)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 11 19
TeXDict begin 11 18 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0
TeXcolorgray 142 -8 a
SDict begin H.S end
 142 -8 a 142 -8 a
SDict begin H.R end
 142 -8 a 142
-8 a
SDict begin [/View [/XYZ H.V]/Dest (page.XI) cvn /DEST pdfmark end
 142 -8 a 0 TeXcolorgray 0 TeXcolorgray 150 82 a
Fg(List)26 b(of)f(T)-11 b(ab)n(les)p 150 120 3461 4 v
0 TeXcolorgray 0 TeXcolorgray 1836 5816 a(XI)p 0 TeXcolorgray
eop end
%%Page: 12 20
TeXDict begin 12 19 bop 0 TeXcolorgray 0 0 a @beginspecial
@setspecial
%%BeginDocument: main.out.ps
%!
/pdfmark where{pop}
{/globaldict where{pop globaldict}{userdict}ifelse/pdfmark/cleartomark load put}
ifelse
[
/Title(\376\377\000C\000o\000n\000t\000e\000n\000t\000s)
/Action/GoTo/Dest(toc.0)cvn
/OUT pdfmark
[
/Title(\376\377\0001\000\040\000I\000n\000t\000r\000o\000d\000u\000c\000t\000i\000o\000n)
/Count 3
/Action/GoTo/Dest(chapter.1)cvn
/OUT pdfmark
[
/Title(\376\377\0001\000.\0001\000\040\000M\000o\000t\000i\000v\000a\000t\000i\000o\000n\000\040\000a\000n\000d\000\040\000P\000r\000o\000b\000l\000e\000m\000\040\000S\000t\000a\000t\000e\000m\000e\000n\000t)
/Action/GoTo/Dest(section.1.1)cvn
/OUT pdfmark
[
/Title(\376\377\0001\000.\0002\000\040\000O\000b\000j\000e\000c\000t\000i\000v\000e\000s\000\040\000o\000f\000\040\000t\000h\000e\000\040\000T\000h\000e\000s\000i\000s)
/Action/GoTo/Dest(section.1.2)cvn
/OUT pdfmark
[
/Title(\376\377\0001\000.\0003\000\040\000S\000t\000r\000u\000c\000t\000u\000r\000e\000\040\000o\000f\000\040\000t\000h\000e\000\040\000T\000h\000e\000s\000i\000s)
/Action/GoTo/Dest(section.1.3)cvn
/OUT pdfmark
[
/Title(\376\377\0002\000\040\000T\000h\000e\000o\000r\000e\000t\000i\000c\000a\000l\000\040\000B\000a\000c\000k\000g\000r\000o\000u\000n\000d)
/Count 7
/Action/GoTo/Dest(chapter.2)cvn
/OUT pdfmark
[
/Title(\376\377\0002\000.\0001\000\040\000N\000e\000u\000r\000o\000d\000e\000g\000e\000n\000e\000r\000a\000t\000i\000v\000e\000\040\000D\000i\000s\000e\000a\000s\000e\000s\000\040\000w\000i\000t\000h\000\040\000C\000o\000g\000n\000i\000t\000i\000v\000e\000\040\000I\000m\000p\000a\000i\000r\000m\000e\000n\000t\000s\000s)
/Action/GoTo/Dest(section.2.1)cvn
/OUT pdfmark
[
/Title(\376\377\0002\000.\0002\000\040\000A\000c\000t\000u\000a\000t\000i\000o\000n\000\040\000T\000e\000c\000h\000n\000o\000l\000o\000g\000i\000e\000s\000\040\000f\000o\000r\000\040\000H\000a\000p\000t\000i\000c\000\040\000F\000e\000e\000d\000b\000a\000c\000k\000s)
/Action/GoTo/Dest(section.2.2)cvn
/OUT pdfmark
[
/Title(\376\377\0002\000.\0003\000\040\000C\000o\000g\000n\000i\000t\000i\000v\000e\000\040\000R\000e\000h\000a\000b\000i\000l\000i\000t\000a\000t\000i\000o\000n\000:\000\040\000C\000o\000n\000c\000e\000p\000t\000s\000,\000\040\000M\000e\000t\000h\000o\000d\000s\000,\000\040\000a\000n\000d\000\040\000T\000a\000r\000g\000e\000t\000\040\000G\000r\000o\000u\000p\000s)
/Action/GoTo/Dest(section.2.3)cvn
/OUT pdfmark
[
/Title(\376\377\0002\000.\0004\000\040\000V\000i\000b\000r\000o\000t\000a\000c\000t\000i\000l\000e\000\040\000S\000t\000i\000m\000u\000l\000a\000t\000i\000o\000n\000:\000\040\000P\000r\000i\000n\000c\000i\000p\000l\000e\000s\000\040\000a\000n\000d\000\040\000T\000h\000e\000r\000a\000p\000e\000u\000t\000i\000c\000\040\000A\000p\000p\000l\000i\000c\000a\000t\000i\000o\000n\000s)
/Action/GoTo/Dest(section.2.4)cvn
/OUT pdfmark
[
/Title(\376\377\0002\000.\0005\000\040\000A\000c\000t\000u\000a\000t\000i\000o\000n\000\040\000T\000e\000c\000h\000n\000o\000l\000o\000g\000i\000e\000s\000\040\000f\000o\000r\000\040\000H\000a\000p\000t\000i\000c\000\040\000F\000e\000e\000d\000b\000a\000c\000k\000s)
/Action/GoTo/Dest(section.2.5)cvn
/OUT pdfmark
[
/Title(\376\377\0002\000.\0006\000\040\000V\000o\000i\000c\000e\000\040\000C\000o\000i\000l\000\040\000A\000c\000t\000u\000a\000t\000o\000r\000s\000\040\000f\000o\000r\000\040\000V\000i\000b\000r\000o\000t\000a\000c\000t\000i\000l\000e\000\040\000S\000t\000i\000m\000u\000l\000a\000t\000i\000o\000n)
/Action/GoTo/Dest(section.2.6)cvn
/OUT pdfmark
[
/Title(\376\377\0002\000.\0007\000\040\000O\000v\000e\000r\000v\000i\000e\000w\000\040\000o\000f\000\040\000E\000x\000i\000s\000t\000i\000n\000g\000\040\000V\000i\000b\000r\000o\000t\000a\000c\000t\000i\000l\000e\000\040\000S\000t\000i\000m\000u\000l\000a\000t\000i\000o\000n\000\040\000S\000y\000s\000t\000e\000m\000s)
/Action/GoTo/Dest(section.2.7)cvn
/OUT pdfmark
[
/Title(\376\377\0003\000\040\000A\000n\000a\000l\000y\000s\000i\000s\000\040\000o\000f\000\040\000t\000h\000e\000\040\000C\000u\000r\000r\000e\000n\000t\000\040\000V\000C\000A\000-\000B\000a\000s\000e\000d\000\040\000S\000y\000s\000t\000e\000m)
/Count 3
/Action/GoTo/Dest(chapter.3)cvn
/OUT pdfmark
[
/Title(\376\377\0003\000.\0001\000\040\000O\000v\000e\000r\000v\000i\000e\000w\000\040\000o\000f\000\040\000t\000h\000e\000\040\000C\000u\000r\000r\000e\000n\000t\000\040\000V\000C\000A\000\040\000S\000y\000s\000t\000e\000m)
/Action/GoTo/Dest(section.3.1)cvn
/OUT pdfmark
[
/Title(\376\377\0003\000.\0002\000\040\000D\000y\000n\000a\000m\000i\000c\000\040\000B\000e\000h\000a\000v\000i\000o\000r\000:\000\040\000F\000r\000e\000q\000u\000e\000n\000c\000y\000\040\000M\000e\000a\000s\000u\000r\000e\000m\000e\000n\000t)
/Count 3
/Action/GoTo/Dest(section.3.2)cvn
/OUT pdfmark
[
/Title(\376\377\0003\000.\0002\000.\0001\000\040\000O\000b\000j\000e\000c\000t\000i\000v\000e)
/Action/GoTo/Dest(subsection.3.2.1)cvn
/OUT pdfmark
[
/Title(\376\377\0003\000.\0002\000.\0002\000\040\000M\000e\000a\000s\000u\000r\000e\000m\000e\000n\000t\000\040\000S\000e\000t\000u\000p)
/Action/GoTo/Dest(subsection.3.2.2)cvn
/OUT pdfmark
[
/Title(\376\377\0003\000.\0002\000.\0003\000\040\000R\000e\000s\000u\000l\000t\000s\000\040\000\046\000\040\000I\000n\000t\000e\000r\000p\000r\000e\000t\000a\000t\000i\000o\000n)
/Action/GoTo/Dest(subsection.3.2.3)cvn
/OUT pdfmark
[
/Title(\376\377\0003\000.\0003\000\040\000L\000i\000m\000i\000t\000a\000t\000i\000o\000n\000s\000\040\000a\000n\000d\000\040\000I\000d\000e\000n\000t\000i\000f\000i\000e\000d\000\040\000C\000h\000a\000l\000l\000e\000n\000g\000e\000s)
/Action/GoTo/Dest(section.3.3)cvn
/OUT pdfmark
[
/Title(\376\377\0004\000\040\000M\000o\000d\000i\000f\000y)
/Action/GoTo/Dest(chapter.4)cvn
/OUT pdfmark
[
/Title(\376\377\0005\000\040\000E\000v\000a\000l\000u\000a\000t\000i\000o\000n)
/Action/GoTo/Dest(chapter.5)cvn
/OUT pdfmark
[
/Title(\376\377\0006\000\040\000C\000o\000n\000c\000l\000u\000s\000i\000o\000n)
/Action/GoTo/Dest(chapter.6)cvn
/OUT pdfmark
[
/Title(\376\377\000B\000i\000b\000l\000i\000o\000g\000r\000a\000p\000h\000y)
/Action/GoTo/Dest(chapter*.9)cvn
/OUT pdfmark
[
/Title(\376\377\000L\000i\000s\000t\000\040\000o\000f\000\040\000F\000i\000g\000u\000r\000e\000s)
/Action/GoTo/Dest(chapter*.10)cvn
/OUT pdfmark
[
/Title(\376\377\000L\000i\000s\000t\000\040\000o\000f\000\040\000T\000a\000b\000l\000e\000s)
/Action/GoTo/Dest(chapter*.11)cvn
/OUT pdfmark

%%EndDocument
 @endspecial 0 TeXcolorgray 0 TeXcolorgray 1364 2257
a Ff(T)-5 b(emporar)q(y)22 b(pa)o(g)q(e!)0 2526 y Fg(L)18
2509 y Fa(A)49 2526 y Fg(T)90 2550 y(E)138 2526 y(X)36
b(w)o(as)f(unab)n(le)e(to)j(guess)f(the)g(total)h(n)o(umber)e(of)i
(pages)e(correctly)-9 b(.)65 b(As)35 b(there)g(w)o(as)g(some)0
2639 y(unprocessed)30 b(data)g(that)g(should)g(ha)n(v)n(e)h(been)e
(added)g(to)i(the)f(\002nal)h(page)f(this)h(e)m(xtr)o(a)h(page)d(has)0
2752 y(been)23 b(added)g(to)j(receiv)n(e)f(it.)0 2921
y(If)k(y)n(ou)f(rer)q(un)g(the)g(document)f(\(without)h(alter)q(ing)g
(it\))h(this)g(sur)s(plus)f(page)f(will)i(go)e(a)n(w)o(a)m(y)-9
b(,)29 b(because)0 3034 y(L)18 3017 y Fa(A)49 3034 y
Fg(T)90 3058 y(E)138 3034 y(X)c(no)o(w)f(kno)o(ws)g(ho)o(w)g(man)o(y)g
(pages)g(to)h(e)m(xpect)g(f)m(or)h(this)g(document.)p
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
